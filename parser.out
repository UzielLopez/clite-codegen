Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Functions
Rule 1     Functions -> Function Functions
Rule 2     Functions -> empty
Rule 3     Function -> Type ID ( ParameterList ) { Declarations Statements }
Rule 4     Function -> Type ID ( ) { Declarations Statements }
Rule 5     ParameterList -> Parameter
Rule 6     ParameterList -> ParameterList , Parameter
Rule 7     Parameter -> Type ID
Rule 8     empty -> <empty>
Rule 9     Declarations -> Declaration Declarations
Rule 10    Declarations -> empty
Rule 11    Declaration -> Type ID ;
Rule 12    Type -> INT
Rule 13    Type -> BOOL
Rule 14    Type -> FLOAT
Rule 15    Type -> CHAR
Rule 16    Statements -> Statement Statements
Rule 17    Statements -> empty
Rule 18    Statement -> ;
Rule 19    Statement -> Block
Rule 20    Statement -> Assignment
Rule 21    Statement -> IfStatement
Rule 22    Statement -> ForStatement
Rule 23    Statement -> WhileStatement
Rule 24    Statement -> ReturnStatement
Rule 25    Statement -> FunctionCallStatement
Rule 26    Block -> { Statements }
Rule 27    Assignment -> ID = Expression ;
Rule 28    Assignment -> ID = FunctionCallStatement
Rule 29    IfStatement -> IF ( Expression ) Statement
Rule 30    IfStatement -> IF ( Expression ) Statement ELSE Statement
Rule 31    ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement
Rule 32    WhileStatement -> WHILE ( Expression ) Statement
Rule 33    ReturnStatement -> RETURN Expression ;
Rule 34    ReturnStatement -> RETURN ;
Rule 35    FunctionCallStatement -> ID ( ArgumentsList ) ;
Rule 36    FunctionCallStatement -> ID ( ) ;
Rule 37    ArgumentsList -> Expression
Rule 38    ArgumentsList -> ArgumentsList , Expression
Rule 39    Expression -> Conjunction
Rule 40    Expression -> Expression OR Conjunction
Rule 41    Conjunction -> Equality
Rule 42    Conjunction -> Conjunction AND Equality
Rule 43    Equality -> Relation
Rule 44    Equality -> Relation EquOp Relation
Rule 45    EquOp -> EQ
Rule 46    EquOp -> NEQ
Rule 47    Relation -> Addition
Rule 48    Relation -> Addition RelOp Addition
Rule 49    RelOp -> <
Rule 50    RelOp -> LE
Rule 51    RelOp -> >
Rule 52    RelOp -> GE
Rule 53    Addition -> Term
Rule 54    Addition -> Addition AddOp Term
Rule 55    AddOp -> +
Rule 56    AddOp -> -
Rule 57    Term -> Factor
Rule 58    Term -> Term MulOp Factor
Rule 59    MulOp -> *
Rule 60    MulOp -> /
Rule 61    MulOp -> %
Rule 62    Factor -> Primary
Rule 63    Factor -> UnaryOp Primary
Rule 64    UnaryOp -> -
Rule 65    UnaryOp -> !
Rule 66    Primary -> FLOATLIT
Rule 67    Primary -> INTLIT
Rule 68    Primary -> ID
Rule 69    Primary -> ( Expression )

Terminals, with rules where they appear

!                    : 65
%                    : 61
(                    : 3 4 29 30 31 32 35 36 69
)                    : 3 4 29 30 31 32 35 36 69
*                    : 59
+                    : 55
,                    : 6 38
-                    : 56 64
/                    : 60
;                    : 11 18 27 31 31 33 34 35 36
<                    : 49
=                    : 27 28 31 31
>                    : 51
AND                  : 42
BOOL                 : 13
CHAR                 : 15
ELSE                 : 30
EQ                   : 45
FLOAT                : 14
FLOATLIT             : 66
FOR                  : 31
GE                   : 52
ID                   : 3 4 7 11 27 28 31 31 35 36 68
IF                   : 29 30
INT                  : 12
INTLIT               : 67
LE                   : 50
NEQ                  : 46
OR                   : 40
RETURN               : 33 34
WHILE                : 32
error                : 
{                    : 3 4 26
}                    : 3 4 26

Nonterminals, with rules where they appear

AddOp                : 54
Addition             : 47 48 48 54
ArgumentsList        : 35 38
Assignment           : 20
Block                : 19
Conjunction          : 39 40 42
Declaration          : 9
Declarations         : 3 4 9
EquOp                : 44
Equality             : 41 42
Expression           : 27 29 30 31 31 31 32 33 37 38 40 69
Factor               : 57 58
ForStatement         : 22
Function             : 1
FunctionCallStatement : 25 28
Functions            : 1 0
IfStatement          : 21
MulOp                : 58
Parameter            : 5 6
ParameterList        : 3 6
Primary              : 62 63
RelOp                : 48
Relation             : 43 44 44
ReturnStatement      : 24
Statement            : 16 29 30 30 31 32
Statements           : 3 4 16 26
Term                 : 53 54 58
Type                 : 3 4 7 11
UnaryOp              : 63
WhileStatement       : 23
empty                : 2 10 17

Parsing method: LALR

state 0

    (0) S' -> . Functions
    (1) Functions -> . Function Functions
    (2) Functions -> . empty
    (3) Function -> . Type ID ( ParameterList ) { Declarations Statements }
    (4) Function -> . Type ID ( ) { Declarations Statements }
    (8) empty -> .
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    $end            reduce using rule 8 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Functions                      shift and go to state 1
    Function                       shift and go to state 2
    empty                          shift and go to state 3
    Type                           shift and go to state 4

state 1

    (0) S' -> Functions .



state 2

    (1) Functions -> Function . Functions
    (1) Functions -> . Function Functions
    (2) Functions -> . empty
    (3) Function -> . Type ID ( ParameterList ) { Declarations Statements }
    (4) Function -> . Type ID ( ) { Declarations Statements }
    (8) empty -> .
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    $end            reduce using rule 8 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Function                       shift and go to state 2
    Functions                      shift and go to state 9
    empty                          shift and go to state 3
    Type                           shift and go to state 4

state 3

    (2) Functions -> empty .

    $end            reduce using rule 2 (Functions -> empty .)


state 4

    (3) Function -> Type . ID ( ParameterList ) { Declarations Statements }
    (4) Function -> Type . ID ( ) { Declarations Statements }

    ID              shift and go to state 10


state 5

    (12) Type -> INT .

    ID              reduce using rule 12 (Type -> INT .)


state 6

    (13) Type -> BOOL .

    ID              reduce using rule 13 (Type -> BOOL .)


state 7

    (14) Type -> FLOAT .

    ID              reduce using rule 14 (Type -> FLOAT .)


state 8

    (15) Type -> CHAR .

    ID              reduce using rule 15 (Type -> CHAR .)


state 9

    (1) Functions -> Function Functions .

    $end            reduce using rule 1 (Functions -> Function Functions .)


state 10

    (3) Function -> Type ID . ( ParameterList ) { Declarations Statements }
    (4) Function -> Type ID . ( ) { Declarations Statements }

    (               shift and go to state 11


state 11

    (3) Function -> Type ID ( . ParameterList ) { Declarations Statements }
    (4) Function -> Type ID ( . ) { Declarations Statements }
    (5) ParameterList -> . Parameter
    (6) ParameterList -> . ParameterList , Parameter
    (7) Parameter -> . Type ID
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    )               shift and go to state 14
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Type                           shift and go to state 12
    ParameterList                  shift and go to state 13
    Parameter                      shift and go to state 15

state 12

    (7) Parameter -> Type . ID

    ID              shift and go to state 16


state 13

    (3) Function -> Type ID ( ParameterList . ) { Declarations Statements }
    (6) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 17
    ,               shift and go to state 18


state 14

    (4) Function -> Type ID ( ) . { Declarations Statements }

    {               shift and go to state 19


state 15

    (5) ParameterList -> Parameter .

    )               reduce using rule 5 (ParameterList -> Parameter .)
    ,               reduce using rule 5 (ParameterList -> Parameter .)


state 16

    (7) Parameter -> Type ID .

    )               reduce using rule 7 (Parameter -> Type ID .)
    ,               reduce using rule 7 (Parameter -> Type ID .)


state 17

    (3) Function -> Type ID ( ParameterList ) . { Declarations Statements }

    {               shift and go to state 20


state 18

    (6) ParameterList -> ParameterList , . Parameter
    (7) Parameter -> . Type ID
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Parameter                      shift and go to state 21
    Type                           shift and go to state 12

state 19

    (4) Function -> Type ID ( ) { . Declarations Statements }
    (9) Declarations -> . Declaration Declarations
    (10) Declarations -> . empty
    (11) Declaration -> . Type ID ;
    (8) empty -> .
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    ;               reduce using rule 8 (empty -> .)
    {               reduce using rule 8 (empty -> .)
    ID              reduce using rule 8 (empty -> .)
    IF              reduce using rule 8 (empty -> .)
    FOR             reduce using rule 8 (empty -> .)
    WHILE           reduce using rule 8 (empty -> .)
    RETURN          reduce using rule 8 (empty -> .)
    }               reduce using rule 8 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Type                           shift and go to state 22
    Declarations                   shift and go to state 23
    Declaration                    shift and go to state 24
    empty                          shift and go to state 25

state 20

    (3) Function -> Type ID ( ParameterList ) { . Declarations Statements }
    (9) Declarations -> . Declaration Declarations
    (10) Declarations -> . empty
    (11) Declaration -> . Type ID ;
    (8) empty -> .
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    ;               reduce using rule 8 (empty -> .)
    {               reduce using rule 8 (empty -> .)
    ID              reduce using rule 8 (empty -> .)
    IF              reduce using rule 8 (empty -> .)
    FOR             reduce using rule 8 (empty -> .)
    WHILE           reduce using rule 8 (empty -> .)
    RETURN          reduce using rule 8 (empty -> .)
    }               reduce using rule 8 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Type                           shift and go to state 22
    Declarations                   shift and go to state 26
    Declaration                    shift and go to state 24
    empty                          shift and go to state 25

state 21

    (6) ParameterList -> ParameterList , Parameter .

    )               reduce using rule 6 (ParameterList -> ParameterList , Parameter .)
    ,               reduce using rule 6 (ParameterList -> ParameterList , Parameter .)


state 22

    (11) Declaration -> Type . ID ;

    ID              shift and go to state 27


state 23

    (4) Function -> Type ID ( ) { Declarations . Statements }
    (16) Statements -> . Statement Statements
    (17) Statements -> . empty
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . ForStatement
    (23) Statement -> . WhileStatement
    (24) Statement -> . ReturnStatement
    (25) Statement -> . FunctionCallStatement
    (8) empty -> .
    (26) Block -> . { Statements }
    (27) Assignment -> . ID = Expression ;
    (28) Assignment -> . ID = FunctionCallStatement
    (29) IfStatement -> . IF ( Expression ) Statement
    (30) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (31) ForStatement -> . FOR ( ID = Expression ; Expression ; ID = Expression ) Statement
    (32) WhileStatement -> . WHILE ( Expression ) Statement
    (33) ReturnStatement -> . RETURN Expression ;
    (34) ReturnStatement -> . RETURN ;
    (35) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (36) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    }               reduce using rule 8 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    RETURN          shift and go to state 44

    Statements                     shift and go to state 30
    Statement                      shift and go to state 31
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    ForStatement                   shift and go to state 37
    WhileStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    FunctionCallStatement          shift and go to state 40

state 24

    (9) Declarations -> Declaration . Declarations
    (9) Declarations -> . Declaration Declarations
    (10) Declarations -> . empty
    (11) Declaration -> . Type ID ;
    (8) empty -> .
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    ;               reduce using rule 8 (empty -> .)
    {               reduce using rule 8 (empty -> .)
    ID              reduce using rule 8 (empty -> .)
    IF              reduce using rule 8 (empty -> .)
    FOR             reduce using rule 8 (empty -> .)
    WHILE           reduce using rule 8 (empty -> .)
    RETURN          reduce using rule 8 (empty -> .)
    }               reduce using rule 8 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Declaration                    shift and go to state 24
    Declarations                   shift and go to state 45
    empty                          shift and go to state 25
    Type                           shift and go to state 22

state 25

    (10) Declarations -> empty .

    ;               reduce using rule 10 (Declarations -> empty .)
    {               reduce using rule 10 (Declarations -> empty .)
    ID              reduce using rule 10 (Declarations -> empty .)
    IF              reduce using rule 10 (Declarations -> empty .)
    FOR             reduce using rule 10 (Declarations -> empty .)
    WHILE           reduce using rule 10 (Declarations -> empty .)
    RETURN          reduce using rule 10 (Declarations -> empty .)
    }               reduce using rule 10 (Declarations -> empty .)


state 26

    (3) Function -> Type ID ( ParameterList ) { Declarations . Statements }
    (16) Statements -> . Statement Statements
    (17) Statements -> . empty
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . ForStatement
    (23) Statement -> . WhileStatement
    (24) Statement -> . ReturnStatement
    (25) Statement -> . FunctionCallStatement
    (8) empty -> .
    (26) Block -> . { Statements }
    (27) Assignment -> . ID = Expression ;
    (28) Assignment -> . ID = FunctionCallStatement
    (29) IfStatement -> . IF ( Expression ) Statement
    (30) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (31) ForStatement -> . FOR ( ID = Expression ; Expression ; ID = Expression ) Statement
    (32) WhileStatement -> . WHILE ( Expression ) Statement
    (33) ReturnStatement -> . RETURN Expression ;
    (34) ReturnStatement -> . RETURN ;
    (35) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (36) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    }               reduce using rule 8 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    RETURN          shift and go to state 44

    Statements                     shift and go to state 46
    Statement                      shift and go to state 31
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    ForStatement                   shift and go to state 37
    WhileStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    FunctionCallStatement          shift and go to state 40

state 27

    (11) Declaration -> Type ID . ;

    ;               shift and go to state 47


state 28

    (27) Assignment -> ID . = Expression ;
    (28) Assignment -> ID . = FunctionCallStatement
    (35) FunctionCallStatement -> ID . ( ArgumentsList ) ;
    (36) FunctionCallStatement -> ID . ( ) ;

    =               shift and go to state 48
    (               shift and go to state 49


state 29

    (26) Block -> { . Statements }
    (16) Statements -> . Statement Statements
    (17) Statements -> . empty
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . ForStatement
    (23) Statement -> . WhileStatement
    (24) Statement -> . ReturnStatement
    (25) Statement -> . FunctionCallStatement
    (8) empty -> .
    (26) Block -> . { Statements }
    (27) Assignment -> . ID = Expression ;
    (28) Assignment -> . ID = FunctionCallStatement
    (29) IfStatement -> . IF ( Expression ) Statement
    (30) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (31) ForStatement -> . FOR ( ID = Expression ; Expression ; ID = Expression ) Statement
    (32) WhileStatement -> . WHILE ( Expression ) Statement
    (33) ReturnStatement -> . RETURN Expression ;
    (34) ReturnStatement -> . RETURN ;
    (35) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (36) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    }               reduce using rule 8 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    RETURN          shift and go to state 44

    Statements                     shift and go to state 50
    Statement                      shift and go to state 31
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    ForStatement                   shift and go to state 37
    WhileStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    FunctionCallStatement          shift and go to state 40

state 30

    (4) Function -> Type ID ( ) { Declarations Statements . }

    }               shift and go to state 51


state 31

    (16) Statements -> Statement . Statements
    (16) Statements -> . Statement Statements
    (17) Statements -> . empty
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . ForStatement
    (23) Statement -> . WhileStatement
    (24) Statement -> . ReturnStatement
    (25) Statement -> . FunctionCallStatement
    (8) empty -> .
    (26) Block -> . { Statements }
    (27) Assignment -> . ID = Expression ;
    (28) Assignment -> . ID = FunctionCallStatement
    (29) IfStatement -> . IF ( Expression ) Statement
    (30) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (31) ForStatement -> . FOR ( ID = Expression ; Expression ; ID = Expression ) Statement
    (32) WhileStatement -> . WHILE ( Expression ) Statement
    (33) ReturnStatement -> . RETURN Expression ;
    (34) ReturnStatement -> . RETURN ;
    (35) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (36) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    }               reduce using rule 8 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    RETURN          shift and go to state 44

    Statement                      shift and go to state 31
    Statements                     shift and go to state 52
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    ForStatement                   shift and go to state 37
    WhileStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    FunctionCallStatement          shift and go to state 40

state 32

    (17) Statements -> empty .

    }               reduce using rule 17 (Statements -> empty .)


state 33

    (18) Statement -> ; .

    ;               reduce using rule 18 (Statement -> ; .)
    {               reduce using rule 18 (Statement -> ; .)
    ID              reduce using rule 18 (Statement -> ; .)
    IF              reduce using rule 18 (Statement -> ; .)
    FOR             reduce using rule 18 (Statement -> ; .)
    WHILE           reduce using rule 18 (Statement -> ; .)
    RETURN          reduce using rule 18 (Statement -> ; .)
    }               reduce using rule 18 (Statement -> ; .)
    ELSE            reduce using rule 18 (Statement -> ; .)


state 34

    (19) Statement -> Block .

    ;               reduce using rule 19 (Statement -> Block .)
    {               reduce using rule 19 (Statement -> Block .)
    ID              reduce using rule 19 (Statement -> Block .)
    IF              reduce using rule 19 (Statement -> Block .)
    FOR             reduce using rule 19 (Statement -> Block .)
    WHILE           reduce using rule 19 (Statement -> Block .)
    RETURN          reduce using rule 19 (Statement -> Block .)
    }               reduce using rule 19 (Statement -> Block .)
    ELSE            reduce using rule 19 (Statement -> Block .)


state 35

    (20) Statement -> Assignment .

    ;               reduce using rule 20 (Statement -> Assignment .)
    {               reduce using rule 20 (Statement -> Assignment .)
    ID              reduce using rule 20 (Statement -> Assignment .)
    IF              reduce using rule 20 (Statement -> Assignment .)
    FOR             reduce using rule 20 (Statement -> Assignment .)
    WHILE           reduce using rule 20 (Statement -> Assignment .)
    RETURN          reduce using rule 20 (Statement -> Assignment .)
    }               reduce using rule 20 (Statement -> Assignment .)
    ELSE            reduce using rule 20 (Statement -> Assignment .)


state 36

    (21) Statement -> IfStatement .

    ;               reduce using rule 21 (Statement -> IfStatement .)
    {               reduce using rule 21 (Statement -> IfStatement .)
    ID              reduce using rule 21 (Statement -> IfStatement .)
    IF              reduce using rule 21 (Statement -> IfStatement .)
    FOR             reduce using rule 21 (Statement -> IfStatement .)
    WHILE           reduce using rule 21 (Statement -> IfStatement .)
    RETURN          reduce using rule 21 (Statement -> IfStatement .)
    }               reduce using rule 21 (Statement -> IfStatement .)
    ELSE            reduce using rule 21 (Statement -> IfStatement .)


state 37

    (22) Statement -> ForStatement .

    ;               reduce using rule 22 (Statement -> ForStatement .)
    {               reduce using rule 22 (Statement -> ForStatement .)
    ID              reduce using rule 22 (Statement -> ForStatement .)
    IF              reduce using rule 22 (Statement -> ForStatement .)
    FOR             reduce using rule 22 (Statement -> ForStatement .)
    WHILE           reduce using rule 22 (Statement -> ForStatement .)
    RETURN          reduce using rule 22 (Statement -> ForStatement .)
    }               reduce using rule 22 (Statement -> ForStatement .)
    ELSE            reduce using rule 22 (Statement -> ForStatement .)


state 38

    (23) Statement -> WhileStatement .

    ;               reduce using rule 23 (Statement -> WhileStatement .)
    {               reduce using rule 23 (Statement -> WhileStatement .)
    ID              reduce using rule 23 (Statement -> WhileStatement .)
    IF              reduce using rule 23 (Statement -> WhileStatement .)
    FOR             reduce using rule 23 (Statement -> WhileStatement .)
    WHILE           reduce using rule 23 (Statement -> WhileStatement .)
    RETURN          reduce using rule 23 (Statement -> WhileStatement .)
    }               reduce using rule 23 (Statement -> WhileStatement .)
    ELSE            reduce using rule 23 (Statement -> WhileStatement .)


state 39

    (24) Statement -> ReturnStatement .

    ;               reduce using rule 24 (Statement -> ReturnStatement .)
    {               reduce using rule 24 (Statement -> ReturnStatement .)
    ID              reduce using rule 24 (Statement -> ReturnStatement .)
    IF              reduce using rule 24 (Statement -> ReturnStatement .)
    FOR             reduce using rule 24 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 24 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 24 (Statement -> ReturnStatement .)
    }               reduce using rule 24 (Statement -> ReturnStatement .)
    ELSE            reduce using rule 24 (Statement -> ReturnStatement .)


state 40

    (25) Statement -> FunctionCallStatement .

    ;               reduce using rule 25 (Statement -> FunctionCallStatement .)
    {               reduce using rule 25 (Statement -> FunctionCallStatement .)
    ID              reduce using rule 25 (Statement -> FunctionCallStatement .)
    IF              reduce using rule 25 (Statement -> FunctionCallStatement .)
    FOR             reduce using rule 25 (Statement -> FunctionCallStatement .)
    WHILE           reduce using rule 25 (Statement -> FunctionCallStatement .)
    RETURN          reduce using rule 25 (Statement -> FunctionCallStatement .)
    }               reduce using rule 25 (Statement -> FunctionCallStatement .)
    ELSE            reduce using rule 25 (Statement -> FunctionCallStatement .)


state 41

    (29) IfStatement -> IF . ( Expression ) Statement
    (30) IfStatement -> IF . ( Expression ) Statement ELSE Statement

    (               shift and go to state 53


state 42

    (31) ForStatement -> FOR . ( ID = Expression ; Expression ; ID = Expression ) Statement

    (               shift and go to state 54


state 43

    (32) WhileStatement -> WHILE . ( Expression ) Statement

    (               shift and go to state 55


state 44

    (33) ReturnStatement -> RETURN . Expression ;
    (34) ReturnStatement -> RETURN . ;
    (39) Expression -> . Conjunction
    (40) Expression -> . Expression OR Conjunction
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    ;               shift and go to state 57
    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Expression                     shift and go to state 56
    Conjunction                    shift and go to state 58
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 45

    (9) Declarations -> Declaration Declarations .

    ;               reduce using rule 9 (Declarations -> Declaration Declarations .)
    {               reduce using rule 9 (Declarations -> Declaration Declarations .)
    ID              reduce using rule 9 (Declarations -> Declaration Declarations .)
    IF              reduce using rule 9 (Declarations -> Declaration Declarations .)
    FOR             reduce using rule 9 (Declarations -> Declaration Declarations .)
    WHILE           reduce using rule 9 (Declarations -> Declaration Declarations .)
    RETURN          reduce using rule 9 (Declarations -> Declaration Declarations .)
    }               reduce using rule 9 (Declarations -> Declaration Declarations .)


state 46

    (3) Function -> Type ID ( ParameterList ) { Declarations Statements . }

    }               shift and go to state 72


state 47

    (11) Declaration -> Type ID ; .

    INT             reduce using rule 11 (Declaration -> Type ID ; .)
    BOOL            reduce using rule 11 (Declaration -> Type ID ; .)
    FLOAT           reduce using rule 11 (Declaration -> Type ID ; .)
    CHAR            reduce using rule 11 (Declaration -> Type ID ; .)
    ;               reduce using rule 11 (Declaration -> Type ID ; .)
    {               reduce using rule 11 (Declaration -> Type ID ; .)
    ID              reduce using rule 11 (Declaration -> Type ID ; .)
    IF              reduce using rule 11 (Declaration -> Type ID ; .)
    FOR             reduce using rule 11 (Declaration -> Type ID ; .)
    WHILE           reduce using rule 11 (Declaration -> Type ID ; .)
    RETURN          reduce using rule 11 (Declaration -> Type ID ; .)
    }               reduce using rule 11 (Declaration -> Type ID ; .)


state 48

    (27) Assignment -> ID = . Expression ;
    (28) Assignment -> ID = . FunctionCallStatement
    (39) Expression -> . Conjunction
    (40) Expression -> . Expression OR Conjunction
    (35) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (36) FunctionCallStatement -> . ID ( ) ;
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    ID              shift and go to state 73
    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Expression                     shift and go to state 74
    FunctionCallStatement          shift and go to state 75
    Conjunction                    shift and go to state 58
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 49

    (35) FunctionCallStatement -> ID ( . ArgumentsList ) ;
    (36) FunctionCallStatement -> ID ( . ) ;
    (37) ArgumentsList -> . Expression
    (38) ArgumentsList -> . ArgumentsList , Expression
    (39) Expression -> . Conjunction
    (40) Expression -> . Expression OR Conjunction
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    )               shift and go to state 77
    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    ArgumentsList                  shift and go to state 76
    Expression                     shift and go to state 78
    Conjunction                    shift and go to state 58
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 50

    (26) Block -> { Statements . }

    }               shift and go to state 79


state 51

    (4) Function -> Type ID ( ) { Declarations Statements } .

    INT             reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    BOOL            reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    FLOAT           reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    CHAR            reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    $end            reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)


state 52

    (16) Statements -> Statement Statements .

    }               reduce using rule 16 (Statements -> Statement Statements .)


state 53

    (29) IfStatement -> IF ( . Expression ) Statement
    (30) IfStatement -> IF ( . Expression ) Statement ELSE Statement
    (39) Expression -> . Conjunction
    (40) Expression -> . Expression OR Conjunction
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Expression                     shift and go to state 80
    Conjunction                    shift and go to state 58
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 54

    (31) ForStatement -> FOR ( . ID = Expression ; Expression ; ID = Expression ) Statement

    ID              shift and go to state 81


state 55

    (32) WhileStatement -> WHILE ( . Expression ) Statement
    (39) Expression -> . Conjunction
    (40) Expression -> . Expression OR Conjunction
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Expression                     shift and go to state 82
    Conjunction                    shift and go to state 58
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 56

    (33) ReturnStatement -> RETURN Expression . ;
    (40) Expression -> Expression . OR Conjunction

    ;               shift and go to state 83
    OR              shift and go to state 84


state 57

    (34) ReturnStatement -> RETURN ; .

    ;               reduce using rule 34 (ReturnStatement -> RETURN ; .)
    {               reduce using rule 34 (ReturnStatement -> RETURN ; .)
    ID              reduce using rule 34 (ReturnStatement -> RETURN ; .)
    IF              reduce using rule 34 (ReturnStatement -> RETURN ; .)
    FOR             reduce using rule 34 (ReturnStatement -> RETURN ; .)
    WHILE           reduce using rule 34 (ReturnStatement -> RETURN ; .)
    RETURN          reduce using rule 34 (ReturnStatement -> RETURN ; .)
    }               reduce using rule 34 (ReturnStatement -> RETURN ; .)
    ELSE            reduce using rule 34 (ReturnStatement -> RETURN ; .)


state 58

    (39) Expression -> Conjunction .
    (42) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 39 (Expression -> Conjunction .)
    OR              reduce using rule 39 (Expression -> Conjunction .)
    )               reduce using rule 39 (Expression -> Conjunction .)
    ,               reduce using rule 39 (Expression -> Conjunction .)
    AND             shift and go to state 85


state 59

    (41) Conjunction -> Equality .

    AND             reduce using rule 41 (Conjunction -> Equality .)
    ;               reduce using rule 41 (Conjunction -> Equality .)
    OR              reduce using rule 41 (Conjunction -> Equality .)
    )               reduce using rule 41 (Conjunction -> Equality .)
    ,               reduce using rule 41 (Conjunction -> Equality .)


state 60

    (43) Equality -> Relation .
    (44) Equality -> Relation . EquOp Relation
    (45) EquOp -> . EQ
    (46) EquOp -> . NEQ

    AND             reduce using rule 43 (Equality -> Relation .)
    ;               reduce using rule 43 (Equality -> Relation .)
    OR              reduce using rule 43 (Equality -> Relation .)
    )               reduce using rule 43 (Equality -> Relation .)
    ,               reduce using rule 43 (Equality -> Relation .)
    EQ              shift and go to state 87
    NEQ             shift and go to state 88

    EquOp                          shift and go to state 86

state 61

    (47) Relation -> Addition .
    (48) Relation -> Addition . RelOp Addition
    (54) Addition -> Addition . AddOp Term
    (49) RelOp -> . <
    (50) RelOp -> . LE
    (51) RelOp -> . >
    (52) RelOp -> . GE
    (55) AddOp -> . +
    (56) AddOp -> . -

    EQ              reduce using rule 47 (Relation -> Addition .)
    NEQ             reduce using rule 47 (Relation -> Addition .)
    AND             reduce using rule 47 (Relation -> Addition .)
    ;               reduce using rule 47 (Relation -> Addition .)
    OR              reduce using rule 47 (Relation -> Addition .)
    )               reduce using rule 47 (Relation -> Addition .)
    ,               reduce using rule 47 (Relation -> Addition .)
    <               shift and go to state 91
    LE              shift and go to state 92
    >               shift and go to state 93
    GE              shift and go to state 94
    +               shift and go to state 95
    -               shift and go to state 96

    RelOp                          shift and go to state 89
    AddOp                          shift and go to state 90

state 62

    (53) Addition -> Term .
    (58) Term -> Term . MulOp Factor
    (59) MulOp -> . *
    (60) MulOp -> . /
    (61) MulOp -> . %

    <               reduce using rule 53 (Addition -> Term .)
    LE              reduce using rule 53 (Addition -> Term .)
    >               reduce using rule 53 (Addition -> Term .)
    GE              reduce using rule 53 (Addition -> Term .)
    +               reduce using rule 53 (Addition -> Term .)
    -               reduce using rule 53 (Addition -> Term .)
    EQ              reduce using rule 53 (Addition -> Term .)
    NEQ             reduce using rule 53 (Addition -> Term .)
    AND             reduce using rule 53 (Addition -> Term .)
    ;               reduce using rule 53 (Addition -> Term .)
    OR              reduce using rule 53 (Addition -> Term .)
    )               reduce using rule 53 (Addition -> Term .)
    ,               reduce using rule 53 (Addition -> Term .)
    *               shift and go to state 98
    /               shift and go to state 99
    %               shift and go to state 100

    MulOp                          shift and go to state 97

state 63

    (57) Term -> Factor .

    *               reduce using rule 57 (Term -> Factor .)
    /               reduce using rule 57 (Term -> Factor .)
    %               reduce using rule 57 (Term -> Factor .)
    <               reduce using rule 57 (Term -> Factor .)
    LE              reduce using rule 57 (Term -> Factor .)
    >               reduce using rule 57 (Term -> Factor .)
    GE              reduce using rule 57 (Term -> Factor .)
    +               reduce using rule 57 (Term -> Factor .)
    -               reduce using rule 57 (Term -> Factor .)
    EQ              reduce using rule 57 (Term -> Factor .)
    NEQ             reduce using rule 57 (Term -> Factor .)
    AND             reduce using rule 57 (Term -> Factor .)
    ;               reduce using rule 57 (Term -> Factor .)
    OR              reduce using rule 57 (Term -> Factor .)
    )               reduce using rule 57 (Term -> Factor .)
    ,               reduce using rule 57 (Term -> Factor .)


state 64

    (62) Factor -> Primary .

    *               reduce using rule 62 (Factor -> Primary .)
    /               reduce using rule 62 (Factor -> Primary .)
    %               reduce using rule 62 (Factor -> Primary .)
    <               reduce using rule 62 (Factor -> Primary .)
    LE              reduce using rule 62 (Factor -> Primary .)
    >               reduce using rule 62 (Factor -> Primary .)
    GE              reduce using rule 62 (Factor -> Primary .)
    +               reduce using rule 62 (Factor -> Primary .)
    -               reduce using rule 62 (Factor -> Primary .)
    EQ              reduce using rule 62 (Factor -> Primary .)
    NEQ             reduce using rule 62 (Factor -> Primary .)
    AND             reduce using rule 62 (Factor -> Primary .)
    ;               reduce using rule 62 (Factor -> Primary .)
    OR              reduce using rule 62 (Factor -> Primary .)
    )               reduce using rule 62 (Factor -> Primary .)
    ,               reduce using rule 62 (Factor -> Primary .)


state 65

    (63) Factor -> UnaryOp . Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69

    Primary                        shift and go to state 101

state 66

    (66) Primary -> FLOATLIT .

    *               reduce using rule 66 (Primary -> FLOATLIT .)
    /               reduce using rule 66 (Primary -> FLOATLIT .)
    %               reduce using rule 66 (Primary -> FLOATLIT .)
    <               reduce using rule 66 (Primary -> FLOATLIT .)
    LE              reduce using rule 66 (Primary -> FLOATLIT .)
    >               reduce using rule 66 (Primary -> FLOATLIT .)
    GE              reduce using rule 66 (Primary -> FLOATLIT .)
    +               reduce using rule 66 (Primary -> FLOATLIT .)
    -               reduce using rule 66 (Primary -> FLOATLIT .)
    EQ              reduce using rule 66 (Primary -> FLOATLIT .)
    NEQ             reduce using rule 66 (Primary -> FLOATLIT .)
    AND             reduce using rule 66 (Primary -> FLOATLIT .)
    ;               reduce using rule 66 (Primary -> FLOATLIT .)
    OR              reduce using rule 66 (Primary -> FLOATLIT .)
    )               reduce using rule 66 (Primary -> FLOATLIT .)
    ,               reduce using rule 66 (Primary -> FLOATLIT .)


state 67

    (67) Primary -> INTLIT .

    *               reduce using rule 67 (Primary -> INTLIT .)
    /               reduce using rule 67 (Primary -> INTLIT .)
    %               reduce using rule 67 (Primary -> INTLIT .)
    <               reduce using rule 67 (Primary -> INTLIT .)
    LE              reduce using rule 67 (Primary -> INTLIT .)
    >               reduce using rule 67 (Primary -> INTLIT .)
    GE              reduce using rule 67 (Primary -> INTLIT .)
    +               reduce using rule 67 (Primary -> INTLIT .)
    -               reduce using rule 67 (Primary -> INTLIT .)
    EQ              reduce using rule 67 (Primary -> INTLIT .)
    NEQ             reduce using rule 67 (Primary -> INTLIT .)
    AND             reduce using rule 67 (Primary -> INTLIT .)
    ;               reduce using rule 67 (Primary -> INTLIT .)
    OR              reduce using rule 67 (Primary -> INTLIT .)
    )               reduce using rule 67 (Primary -> INTLIT .)
    ,               reduce using rule 67 (Primary -> INTLIT .)


state 68

    (68) Primary -> ID .

    *               reduce using rule 68 (Primary -> ID .)
    /               reduce using rule 68 (Primary -> ID .)
    %               reduce using rule 68 (Primary -> ID .)
    <               reduce using rule 68 (Primary -> ID .)
    LE              reduce using rule 68 (Primary -> ID .)
    >               reduce using rule 68 (Primary -> ID .)
    GE              reduce using rule 68 (Primary -> ID .)
    +               reduce using rule 68 (Primary -> ID .)
    -               reduce using rule 68 (Primary -> ID .)
    EQ              reduce using rule 68 (Primary -> ID .)
    NEQ             reduce using rule 68 (Primary -> ID .)
    AND             reduce using rule 68 (Primary -> ID .)
    ;               reduce using rule 68 (Primary -> ID .)
    OR              reduce using rule 68 (Primary -> ID .)
    )               reduce using rule 68 (Primary -> ID .)
    ,               reduce using rule 68 (Primary -> ID .)


state 69

    (69) Primary -> ( . Expression )
    (39) Expression -> . Conjunction
    (40) Expression -> . Expression OR Conjunction
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Expression                     shift and go to state 102
    Conjunction                    shift and go to state 58
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 70

    (64) UnaryOp -> - .

    FLOATLIT        reduce using rule 64 (UnaryOp -> - .)
    INTLIT          reduce using rule 64 (UnaryOp -> - .)
    ID              reduce using rule 64 (UnaryOp -> - .)
    (               reduce using rule 64 (UnaryOp -> - .)


state 71

    (65) UnaryOp -> ! .

    FLOATLIT        reduce using rule 65 (UnaryOp -> ! .)
    INTLIT          reduce using rule 65 (UnaryOp -> ! .)
    ID              reduce using rule 65 (UnaryOp -> ! .)
    (               reduce using rule 65 (UnaryOp -> ! .)


state 72

    (3) Function -> Type ID ( ParameterList ) { Declarations Statements } .

    INT             reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    BOOL            reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    FLOAT           reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    CHAR            reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    $end            reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)


state 73

    (35) FunctionCallStatement -> ID . ( ArgumentsList ) ;
    (36) FunctionCallStatement -> ID . ( ) ;
    (68) Primary -> ID .

    (               shift and go to state 49
    *               reduce using rule 68 (Primary -> ID .)
    /               reduce using rule 68 (Primary -> ID .)
    %               reduce using rule 68 (Primary -> ID .)
    <               reduce using rule 68 (Primary -> ID .)
    LE              reduce using rule 68 (Primary -> ID .)
    >               reduce using rule 68 (Primary -> ID .)
    GE              reduce using rule 68 (Primary -> ID .)
    +               reduce using rule 68 (Primary -> ID .)
    -               reduce using rule 68 (Primary -> ID .)
    EQ              reduce using rule 68 (Primary -> ID .)
    NEQ             reduce using rule 68 (Primary -> ID .)
    AND             reduce using rule 68 (Primary -> ID .)
    ;               reduce using rule 68 (Primary -> ID .)
    OR              reduce using rule 68 (Primary -> ID .)


state 74

    (27) Assignment -> ID = Expression . ;
    (40) Expression -> Expression . OR Conjunction

    ;               shift and go to state 103
    OR              shift and go to state 84


state 75

    (28) Assignment -> ID = FunctionCallStatement .

    ;               reduce using rule 28 (Assignment -> ID = FunctionCallStatement .)
    {               reduce using rule 28 (Assignment -> ID = FunctionCallStatement .)
    ID              reduce using rule 28 (Assignment -> ID = FunctionCallStatement .)
    IF              reduce using rule 28 (Assignment -> ID = FunctionCallStatement .)
    FOR             reduce using rule 28 (Assignment -> ID = FunctionCallStatement .)
    WHILE           reduce using rule 28 (Assignment -> ID = FunctionCallStatement .)
    RETURN          reduce using rule 28 (Assignment -> ID = FunctionCallStatement .)
    }               reduce using rule 28 (Assignment -> ID = FunctionCallStatement .)
    ELSE            reduce using rule 28 (Assignment -> ID = FunctionCallStatement .)


state 76

    (35) FunctionCallStatement -> ID ( ArgumentsList . ) ;
    (38) ArgumentsList -> ArgumentsList . , Expression

    )               shift and go to state 104
    ,               shift and go to state 105


state 77

    (36) FunctionCallStatement -> ID ( ) . ;

    ;               shift and go to state 106


state 78

    (37) ArgumentsList -> Expression .
    (40) Expression -> Expression . OR Conjunction

    )               reduce using rule 37 (ArgumentsList -> Expression .)
    ,               reduce using rule 37 (ArgumentsList -> Expression .)
    OR              shift and go to state 84


state 79

    (26) Block -> { Statements } .

    ;               reduce using rule 26 (Block -> { Statements } .)
    {               reduce using rule 26 (Block -> { Statements } .)
    ID              reduce using rule 26 (Block -> { Statements } .)
    IF              reduce using rule 26 (Block -> { Statements } .)
    FOR             reduce using rule 26 (Block -> { Statements } .)
    WHILE           reduce using rule 26 (Block -> { Statements } .)
    RETURN          reduce using rule 26 (Block -> { Statements } .)
    }               reduce using rule 26 (Block -> { Statements } .)
    ELSE            reduce using rule 26 (Block -> { Statements } .)


state 80

    (29) IfStatement -> IF ( Expression . ) Statement
    (30) IfStatement -> IF ( Expression . ) Statement ELSE Statement
    (40) Expression -> Expression . OR Conjunction

    )               shift and go to state 107
    OR              shift and go to state 84


state 81

    (31) ForStatement -> FOR ( ID . = Expression ; Expression ; ID = Expression ) Statement

    =               shift and go to state 108


state 82

    (32) WhileStatement -> WHILE ( Expression . ) Statement
    (40) Expression -> Expression . OR Conjunction

    )               shift and go to state 109
    OR              shift and go to state 84


state 83

    (33) ReturnStatement -> RETURN Expression ; .

    ;               reduce using rule 33 (ReturnStatement -> RETURN Expression ; .)
    {               reduce using rule 33 (ReturnStatement -> RETURN Expression ; .)
    ID              reduce using rule 33 (ReturnStatement -> RETURN Expression ; .)
    IF              reduce using rule 33 (ReturnStatement -> RETURN Expression ; .)
    FOR             reduce using rule 33 (ReturnStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 33 (ReturnStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 33 (ReturnStatement -> RETURN Expression ; .)
    }               reduce using rule 33 (ReturnStatement -> RETURN Expression ; .)
    ELSE            reduce using rule 33 (ReturnStatement -> RETURN Expression ; .)


state 84

    (40) Expression -> Expression OR . Conjunction
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Conjunction                    shift and go to state 110
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 85

    (42) Conjunction -> Conjunction AND . Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Equality                       shift and go to state 111
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 86

    (44) Equality -> Relation EquOp . Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Relation                       shift and go to state 112
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 87

    (45) EquOp -> EQ .

    FLOATLIT        reduce using rule 45 (EquOp -> EQ .)
    INTLIT          reduce using rule 45 (EquOp -> EQ .)
    ID              reduce using rule 45 (EquOp -> EQ .)
    (               reduce using rule 45 (EquOp -> EQ .)
    -               reduce using rule 45 (EquOp -> EQ .)
    !               reduce using rule 45 (EquOp -> EQ .)


state 88

    (46) EquOp -> NEQ .

    FLOATLIT        reduce using rule 46 (EquOp -> NEQ .)
    INTLIT          reduce using rule 46 (EquOp -> NEQ .)
    ID              reduce using rule 46 (EquOp -> NEQ .)
    (               reduce using rule 46 (EquOp -> NEQ .)
    -               reduce using rule 46 (EquOp -> NEQ .)
    !               reduce using rule 46 (EquOp -> NEQ .)


state 89

    (48) Relation -> Addition RelOp . Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Addition                       shift and go to state 113
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 90

    (54) Addition -> Addition AddOp . Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Term                           shift and go to state 114
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 91

    (49) RelOp -> < .

    FLOATLIT        reduce using rule 49 (RelOp -> < .)
    INTLIT          reduce using rule 49 (RelOp -> < .)
    ID              reduce using rule 49 (RelOp -> < .)
    (               reduce using rule 49 (RelOp -> < .)
    -               reduce using rule 49 (RelOp -> < .)
    !               reduce using rule 49 (RelOp -> < .)


state 92

    (50) RelOp -> LE .

    FLOATLIT        reduce using rule 50 (RelOp -> LE .)
    INTLIT          reduce using rule 50 (RelOp -> LE .)
    ID              reduce using rule 50 (RelOp -> LE .)
    (               reduce using rule 50 (RelOp -> LE .)
    -               reduce using rule 50 (RelOp -> LE .)
    !               reduce using rule 50 (RelOp -> LE .)


state 93

    (51) RelOp -> > .

    FLOATLIT        reduce using rule 51 (RelOp -> > .)
    INTLIT          reduce using rule 51 (RelOp -> > .)
    ID              reduce using rule 51 (RelOp -> > .)
    (               reduce using rule 51 (RelOp -> > .)
    -               reduce using rule 51 (RelOp -> > .)
    !               reduce using rule 51 (RelOp -> > .)


state 94

    (52) RelOp -> GE .

    FLOATLIT        reduce using rule 52 (RelOp -> GE .)
    INTLIT          reduce using rule 52 (RelOp -> GE .)
    ID              reduce using rule 52 (RelOp -> GE .)
    (               reduce using rule 52 (RelOp -> GE .)
    -               reduce using rule 52 (RelOp -> GE .)
    !               reduce using rule 52 (RelOp -> GE .)


state 95

    (55) AddOp -> + .

    FLOATLIT        reduce using rule 55 (AddOp -> + .)
    INTLIT          reduce using rule 55 (AddOp -> + .)
    ID              reduce using rule 55 (AddOp -> + .)
    (               reduce using rule 55 (AddOp -> + .)
    -               reduce using rule 55 (AddOp -> + .)
    !               reduce using rule 55 (AddOp -> + .)


state 96

    (56) AddOp -> - .

    FLOATLIT        reduce using rule 56 (AddOp -> - .)
    INTLIT          reduce using rule 56 (AddOp -> - .)
    ID              reduce using rule 56 (AddOp -> - .)
    (               reduce using rule 56 (AddOp -> - .)
    -               reduce using rule 56 (AddOp -> - .)
    !               reduce using rule 56 (AddOp -> - .)


state 97

    (58) Term -> Term MulOp . Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Factor                         shift and go to state 115
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 98

    (59) MulOp -> * .

    FLOATLIT        reduce using rule 59 (MulOp -> * .)
    INTLIT          reduce using rule 59 (MulOp -> * .)
    ID              reduce using rule 59 (MulOp -> * .)
    (               reduce using rule 59 (MulOp -> * .)
    -               reduce using rule 59 (MulOp -> * .)
    !               reduce using rule 59 (MulOp -> * .)


state 99

    (60) MulOp -> / .

    FLOATLIT        reduce using rule 60 (MulOp -> / .)
    INTLIT          reduce using rule 60 (MulOp -> / .)
    ID              reduce using rule 60 (MulOp -> / .)
    (               reduce using rule 60 (MulOp -> / .)
    -               reduce using rule 60 (MulOp -> / .)
    !               reduce using rule 60 (MulOp -> / .)


state 100

    (61) MulOp -> % .

    FLOATLIT        reduce using rule 61 (MulOp -> % .)
    INTLIT          reduce using rule 61 (MulOp -> % .)
    ID              reduce using rule 61 (MulOp -> % .)
    (               reduce using rule 61 (MulOp -> % .)
    -               reduce using rule 61 (MulOp -> % .)
    !               reduce using rule 61 (MulOp -> % .)


state 101

    (63) Factor -> UnaryOp Primary .

    *               reduce using rule 63 (Factor -> UnaryOp Primary .)
    /               reduce using rule 63 (Factor -> UnaryOp Primary .)
    %               reduce using rule 63 (Factor -> UnaryOp Primary .)
    <               reduce using rule 63 (Factor -> UnaryOp Primary .)
    LE              reduce using rule 63 (Factor -> UnaryOp Primary .)
    >               reduce using rule 63 (Factor -> UnaryOp Primary .)
    GE              reduce using rule 63 (Factor -> UnaryOp Primary .)
    +               reduce using rule 63 (Factor -> UnaryOp Primary .)
    -               reduce using rule 63 (Factor -> UnaryOp Primary .)
    EQ              reduce using rule 63 (Factor -> UnaryOp Primary .)
    NEQ             reduce using rule 63 (Factor -> UnaryOp Primary .)
    AND             reduce using rule 63 (Factor -> UnaryOp Primary .)
    ;               reduce using rule 63 (Factor -> UnaryOp Primary .)
    OR              reduce using rule 63 (Factor -> UnaryOp Primary .)
    )               reduce using rule 63 (Factor -> UnaryOp Primary .)
    ,               reduce using rule 63 (Factor -> UnaryOp Primary .)


state 102

    (69) Primary -> ( Expression . )
    (40) Expression -> Expression . OR Conjunction

    )               shift and go to state 116
    OR              shift and go to state 84


state 103

    (27) Assignment -> ID = Expression ; .

    ;               reduce using rule 27 (Assignment -> ID = Expression ; .)
    {               reduce using rule 27 (Assignment -> ID = Expression ; .)
    ID              reduce using rule 27 (Assignment -> ID = Expression ; .)
    IF              reduce using rule 27 (Assignment -> ID = Expression ; .)
    FOR             reduce using rule 27 (Assignment -> ID = Expression ; .)
    WHILE           reduce using rule 27 (Assignment -> ID = Expression ; .)
    RETURN          reduce using rule 27 (Assignment -> ID = Expression ; .)
    }               reduce using rule 27 (Assignment -> ID = Expression ; .)
    ELSE            reduce using rule 27 (Assignment -> ID = Expression ; .)


state 104

    (35) FunctionCallStatement -> ID ( ArgumentsList ) . ;

    ;               shift and go to state 117


state 105

    (38) ArgumentsList -> ArgumentsList , . Expression
    (39) Expression -> . Conjunction
    (40) Expression -> . Expression OR Conjunction
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Expression                     shift and go to state 118
    Conjunction                    shift and go to state 58
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 106

    (36) FunctionCallStatement -> ID ( ) ; .

    ;               reduce using rule 36 (FunctionCallStatement -> ID ( ) ; .)
    {               reduce using rule 36 (FunctionCallStatement -> ID ( ) ; .)
    ID              reduce using rule 36 (FunctionCallStatement -> ID ( ) ; .)
    IF              reduce using rule 36 (FunctionCallStatement -> ID ( ) ; .)
    FOR             reduce using rule 36 (FunctionCallStatement -> ID ( ) ; .)
    WHILE           reduce using rule 36 (FunctionCallStatement -> ID ( ) ; .)
    RETURN          reduce using rule 36 (FunctionCallStatement -> ID ( ) ; .)
    }               reduce using rule 36 (FunctionCallStatement -> ID ( ) ; .)
    ELSE            reduce using rule 36 (FunctionCallStatement -> ID ( ) ; .)


state 107

    (29) IfStatement -> IF ( Expression ) . Statement
    (30) IfStatement -> IF ( Expression ) . Statement ELSE Statement
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . ForStatement
    (23) Statement -> . WhileStatement
    (24) Statement -> . ReturnStatement
    (25) Statement -> . FunctionCallStatement
    (26) Block -> . { Statements }
    (27) Assignment -> . ID = Expression ;
    (28) Assignment -> . ID = FunctionCallStatement
    (29) IfStatement -> . IF ( Expression ) Statement
    (30) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (31) ForStatement -> . FOR ( ID = Expression ; Expression ; ID = Expression ) Statement
    (32) WhileStatement -> . WHILE ( Expression ) Statement
    (33) ReturnStatement -> . RETURN Expression ;
    (34) ReturnStatement -> . RETURN ;
    (35) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (36) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    RETURN          shift and go to state 44

    Statement                      shift and go to state 119
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    ForStatement                   shift and go to state 37
    WhileStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    FunctionCallStatement          shift and go to state 40

state 108

    (31) ForStatement -> FOR ( ID = . Expression ; Expression ; ID = Expression ) Statement
    (39) Expression -> . Conjunction
    (40) Expression -> . Expression OR Conjunction
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Expression                     shift and go to state 120
    Conjunction                    shift and go to state 58
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 109

    (32) WhileStatement -> WHILE ( Expression ) . Statement
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . ForStatement
    (23) Statement -> . WhileStatement
    (24) Statement -> . ReturnStatement
    (25) Statement -> . FunctionCallStatement
    (26) Block -> . { Statements }
    (27) Assignment -> . ID = Expression ;
    (28) Assignment -> . ID = FunctionCallStatement
    (29) IfStatement -> . IF ( Expression ) Statement
    (30) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (31) ForStatement -> . FOR ( ID = Expression ; Expression ; ID = Expression ) Statement
    (32) WhileStatement -> . WHILE ( Expression ) Statement
    (33) ReturnStatement -> . RETURN Expression ;
    (34) ReturnStatement -> . RETURN ;
    (35) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (36) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    RETURN          shift and go to state 44

    Statement                      shift and go to state 121
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    ForStatement                   shift and go to state 37
    WhileStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    FunctionCallStatement          shift and go to state 40

state 110

    (40) Expression -> Expression OR Conjunction .
    (42) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 40 (Expression -> Expression OR Conjunction .)
    OR              reduce using rule 40 (Expression -> Expression OR Conjunction .)
    )               reduce using rule 40 (Expression -> Expression OR Conjunction .)
    ,               reduce using rule 40 (Expression -> Expression OR Conjunction .)
    AND             shift and go to state 85


state 111

    (42) Conjunction -> Conjunction AND Equality .

    AND             reduce using rule 42 (Conjunction -> Conjunction AND Equality .)
    ;               reduce using rule 42 (Conjunction -> Conjunction AND Equality .)
    OR              reduce using rule 42 (Conjunction -> Conjunction AND Equality .)
    )               reduce using rule 42 (Conjunction -> Conjunction AND Equality .)
    ,               reduce using rule 42 (Conjunction -> Conjunction AND Equality .)


state 112

    (44) Equality -> Relation EquOp Relation .

    AND             reduce using rule 44 (Equality -> Relation EquOp Relation .)
    ;               reduce using rule 44 (Equality -> Relation EquOp Relation .)
    OR              reduce using rule 44 (Equality -> Relation EquOp Relation .)
    )               reduce using rule 44 (Equality -> Relation EquOp Relation .)
    ,               reduce using rule 44 (Equality -> Relation EquOp Relation .)


state 113

    (48) Relation -> Addition RelOp Addition .
    (54) Addition -> Addition . AddOp Term
    (55) AddOp -> . +
    (56) AddOp -> . -

    EQ              reduce using rule 48 (Relation -> Addition RelOp Addition .)
    NEQ             reduce using rule 48 (Relation -> Addition RelOp Addition .)
    AND             reduce using rule 48 (Relation -> Addition RelOp Addition .)
    ;               reduce using rule 48 (Relation -> Addition RelOp Addition .)
    OR              reduce using rule 48 (Relation -> Addition RelOp Addition .)
    )               reduce using rule 48 (Relation -> Addition RelOp Addition .)
    ,               reduce using rule 48 (Relation -> Addition RelOp Addition .)
    +               shift and go to state 95
    -               shift and go to state 96

    AddOp                          shift and go to state 90

state 114

    (54) Addition -> Addition AddOp Term .
    (58) Term -> Term . MulOp Factor
    (59) MulOp -> . *
    (60) MulOp -> . /
    (61) MulOp -> . %

    <               reduce using rule 54 (Addition -> Addition AddOp Term .)
    LE              reduce using rule 54 (Addition -> Addition AddOp Term .)
    >               reduce using rule 54 (Addition -> Addition AddOp Term .)
    GE              reduce using rule 54 (Addition -> Addition AddOp Term .)
    +               reduce using rule 54 (Addition -> Addition AddOp Term .)
    -               reduce using rule 54 (Addition -> Addition AddOp Term .)
    EQ              reduce using rule 54 (Addition -> Addition AddOp Term .)
    NEQ             reduce using rule 54 (Addition -> Addition AddOp Term .)
    AND             reduce using rule 54 (Addition -> Addition AddOp Term .)
    ;               reduce using rule 54 (Addition -> Addition AddOp Term .)
    OR              reduce using rule 54 (Addition -> Addition AddOp Term .)
    )               reduce using rule 54 (Addition -> Addition AddOp Term .)
    ,               reduce using rule 54 (Addition -> Addition AddOp Term .)
    *               shift and go to state 98
    /               shift and go to state 99
    %               shift and go to state 100

    MulOp                          shift and go to state 97

state 115

    (58) Term -> Term MulOp Factor .

    *               reduce using rule 58 (Term -> Term MulOp Factor .)
    /               reduce using rule 58 (Term -> Term MulOp Factor .)
    %               reduce using rule 58 (Term -> Term MulOp Factor .)
    <               reduce using rule 58 (Term -> Term MulOp Factor .)
    LE              reduce using rule 58 (Term -> Term MulOp Factor .)
    >               reduce using rule 58 (Term -> Term MulOp Factor .)
    GE              reduce using rule 58 (Term -> Term MulOp Factor .)
    +               reduce using rule 58 (Term -> Term MulOp Factor .)
    -               reduce using rule 58 (Term -> Term MulOp Factor .)
    EQ              reduce using rule 58 (Term -> Term MulOp Factor .)
    NEQ             reduce using rule 58 (Term -> Term MulOp Factor .)
    AND             reduce using rule 58 (Term -> Term MulOp Factor .)
    ;               reduce using rule 58 (Term -> Term MulOp Factor .)
    OR              reduce using rule 58 (Term -> Term MulOp Factor .)
    )               reduce using rule 58 (Term -> Term MulOp Factor .)
    ,               reduce using rule 58 (Term -> Term MulOp Factor .)


state 116

    (69) Primary -> ( Expression ) .

    *               reduce using rule 69 (Primary -> ( Expression ) .)
    /               reduce using rule 69 (Primary -> ( Expression ) .)
    %               reduce using rule 69 (Primary -> ( Expression ) .)
    <               reduce using rule 69 (Primary -> ( Expression ) .)
    LE              reduce using rule 69 (Primary -> ( Expression ) .)
    >               reduce using rule 69 (Primary -> ( Expression ) .)
    GE              reduce using rule 69 (Primary -> ( Expression ) .)
    +               reduce using rule 69 (Primary -> ( Expression ) .)
    -               reduce using rule 69 (Primary -> ( Expression ) .)
    EQ              reduce using rule 69 (Primary -> ( Expression ) .)
    NEQ             reduce using rule 69 (Primary -> ( Expression ) .)
    AND             reduce using rule 69 (Primary -> ( Expression ) .)
    ;               reduce using rule 69 (Primary -> ( Expression ) .)
    OR              reduce using rule 69 (Primary -> ( Expression ) .)
    )               reduce using rule 69 (Primary -> ( Expression ) .)
    ,               reduce using rule 69 (Primary -> ( Expression ) .)


state 117

    (35) FunctionCallStatement -> ID ( ArgumentsList ) ; .

    ;               reduce using rule 35 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    {               reduce using rule 35 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    ID              reduce using rule 35 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    IF              reduce using rule 35 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    FOR             reduce using rule 35 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    WHILE           reduce using rule 35 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    RETURN          reduce using rule 35 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    }               reduce using rule 35 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    ELSE            reduce using rule 35 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)


state 118

    (38) ArgumentsList -> ArgumentsList , Expression .
    (40) Expression -> Expression . OR Conjunction

    )               reduce using rule 38 (ArgumentsList -> ArgumentsList , Expression .)
    ,               reduce using rule 38 (ArgumentsList -> ArgumentsList , Expression .)
    OR              shift and go to state 84


state 119

    (29) IfStatement -> IF ( Expression ) Statement .
    (30) IfStatement -> IF ( Expression ) Statement . ELSE Statement

  ! shift/reduce conflict for ELSE resolved as shift
    ;               reduce using rule 29 (IfStatement -> IF ( Expression ) Statement .)
    {               reduce using rule 29 (IfStatement -> IF ( Expression ) Statement .)
    ID              reduce using rule 29 (IfStatement -> IF ( Expression ) Statement .)
    IF              reduce using rule 29 (IfStatement -> IF ( Expression ) Statement .)
    FOR             reduce using rule 29 (IfStatement -> IF ( Expression ) Statement .)
    WHILE           reduce using rule 29 (IfStatement -> IF ( Expression ) Statement .)
    RETURN          reduce using rule 29 (IfStatement -> IF ( Expression ) Statement .)
    }               reduce using rule 29 (IfStatement -> IF ( Expression ) Statement .)
    ELSE            shift and go to state 122

  ! ELSE            [ reduce using rule 29 (IfStatement -> IF ( Expression ) Statement .) ]


state 120

    (31) ForStatement -> FOR ( ID = Expression . ; Expression ; ID = Expression ) Statement
    (40) Expression -> Expression . OR Conjunction

    ;               shift and go to state 123
    OR              shift and go to state 84


state 121

    (32) WhileStatement -> WHILE ( Expression ) Statement .

    ;               reduce using rule 32 (WhileStatement -> WHILE ( Expression ) Statement .)
    {               reduce using rule 32 (WhileStatement -> WHILE ( Expression ) Statement .)
    ID              reduce using rule 32 (WhileStatement -> WHILE ( Expression ) Statement .)
    IF              reduce using rule 32 (WhileStatement -> WHILE ( Expression ) Statement .)
    FOR             reduce using rule 32 (WhileStatement -> WHILE ( Expression ) Statement .)
    WHILE           reduce using rule 32 (WhileStatement -> WHILE ( Expression ) Statement .)
    RETURN          reduce using rule 32 (WhileStatement -> WHILE ( Expression ) Statement .)
    }               reduce using rule 32 (WhileStatement -> WHILE ( Expression ) Statement .)
    ELSE            reduce using rule 32 (WhileStatement -> WHILE ( Expression ) Statement .)


state 122

    (30) IfStatement -> IF ( Expression ) Statement ELSE . Statement
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . ForStatement
    (23) Statement -> . WhileStatement
    (24) Statement -> . ReturnStatement
    (25) Statement -> . FunctionCallStatement
    (26) Block -> . { Statements }
    (27) Assignment -> . ID = Expression ;
    (28) Assignment -> . ID = FunctionCallStatement
    (29) IfStatement -> . IF ( Expression ) Statement
    (30) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (31) ForStatement -> . FOR ( ID = Expression ; Expression ; ID = Expression ) Statement
    (32) WhileStatement -> . WHILE ( Expression ) Statement
    (33) ReturnStatement -> . RETURN Expression ;
    (34) ReturnStatement -> . RETURN ;
    (35) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (36) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    RETURN          shift and go to state 44

    Statement                      shift and go to state 124
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    ForStatement                   shift and go to state 37
    WhileStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    FunctionCallStatement          shift and go to state 40

state 123

    (31) ForStatement -> FOR ( ID = Expression ; . Expression ; ID = Expression ) Statement
    (39) Expression -> . Conjunction
    (40) Expression -> . Expression OR Conjunction
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Expression                     shift and go to state 125
    Conjunction                    shift and go to state 58
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 124

    (30) IfStatement -> IF ( Expression ) Statement ELSE Statement .

    ;               reduce using rule 30 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    {               reduce using rule 30 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ID              reduce using rule 30 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    IF              reduce using rule 30 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    FOR             reduce using rule 30 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    WHILE           reduce using rule 30 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    RETURN          reduce using rule 30 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    }               reduce using rule 30 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ELSE            reduce using rule 30 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)


state 125

    (31) ForStatement -> FOR ( ID = Expression ; Expression . ; ID = Expression ) Statement
    (40) Expression -> Expression . OR Conjunction

    ;               shift and go to state 126
    OR              shift and go to state 84


state 126

    (31) ForStatement -> FOR ( ID = Expression ; Expression ; . ID = Expression ) Statement

    ID              shift and go to state 127


state 127

    (31) ForStatement -> FOR ( ID = Expression ; Expression ; ID . = Expression ) Statement

    =               shift and go to state 128


state 128

    (31) ForStatement -> FOR ( ID = Expression ; Expression ; ID = . Expression ) Statement
    (39) Expression -> . Conjunction
    (40) Expression -> . Expression OR Conjunction
    (41) Conjunction -> . Equality
    (42) Conjunction -> . Conjunction AND Equality
    (43) Equality -> . Relation
    (44) Equality -> . Relation EquOp Relation
    (47) Relation -> . Addition
    (48) Relation -> . Addition RelOp Addition
    (53) Addition -> . Term
    (54) Addition -> . Addition AddOp Term
    (57) Term -> . Factor
    (58) Term -> . Term MulOp Factor
    (62) Factor -> . Primary
    (63) Factor -> . UnaryOp Primary
    (66) Primary -> . FLOATLIT
    (67) Primary -> . INTLIT
    (68) Primary -> . ID
    (69) Primary -> . ( Expression )
    (64) UnaryOp -> . -
    (65) UnaryOp -> . !

    FLOATLIT        shift and go to state 66
    INTLIT          shift and go to state 67
    ID              shift and go to state 68
    (               shift and go to state 69
    -               shift and go to state 70
    !               shift and go to state 71

    Expression                     shift and go to state 129
    Conjunction                    shift and go to state 58
    Equality                       shift and go to state 59
    Relation                       shift and go to state 60
    Addition                       shift and go to state 61
    Term                           shift and go to state 62
    Factor                         shift and go to state 63
    Primary                        shift and go to state 64
    UnaryOp                        shift and go to state 65

state 129

    (31) ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression . ) Statement
    (40) Expression -> Expression . OR Conjunction

    )               shift and go to state 130
    OR              shift and go to state 84


state 130

    (31) ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) . Statement
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . ForStatement
    (23) Statement -> . WhileStatement
    (24) Statement -> . ReturnStatement
    (25) Statement -> . FunctionCallStatement
    (26) Block -> . { Statements }
    (27) Assignment -> . ID = Expression ;
    (28) Assignment -> . ID = FunctionCallStatement
    (29) IfStatement -> . IF ( Expression ) Statement
    (30) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (31) ForStatement -> . FOR ( ID = Expression ; Expression ; ID = Expression ) Statement
    (32) WhileStatement -> . WHILE ( Expression ) Statement
    (33) ReturnStatement -> . RETURN Expression ;
    (34) ReturnStatement -> . RETURN ;
    (35) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (36) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    RETURN          shift and go to state 44

    Statement                      shift and go to state 131
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    ForStatement                   shift and go to state 37
    WhileStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    FunctionCallStatement          shift and go to state 40

state 131

    (31) ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement .

    ;               reduce using rule 31 (ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement .)
    {               reduce using rule 31 (ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement .)
    ID              reduce using rule 31 (ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement .)
    IF              reduce using rule 31 (ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement .)
    FOR             reduce using rule 31 (ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement .)
    WHILE           reduce using rule 31 (ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement .)
    RETURN          reduce using rule 31 (ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement .)
    }               reduce using rule 31 (ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement .)
    ELSE            reduce using rule 31 (ForStatement -> FOR ( ID = Expression ; Expression ; ID = Expression ) Statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 119 resolved as shift
