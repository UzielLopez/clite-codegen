Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Functions
Rule 1     Functions -> Function Functions
Rule 2     Functions -> empty
Rule 3     Function -> Type ID ( ParameterList ) { Declarations Statements }
Rule 4     Function -> Type ID ( ) { Declarations Statements }
Rule 5     FunctionCallStatement -> ID ( ArgumentsList ) ;
Rule 6     FunctionCallStatement -> ID ( ) ;
Rule 7     ArgumentsList -> Expression
Rule 8     ArgumentsList -> ArgumentsList , Expression
Rule 9     ParameterList -> Parameter
Rule 10    ParameterList -> ParameterList , Parameter
Rule 11    Parameter -> Type ID
Rule 12    empty -> <empty>
Rule 13    Declarations -> Declaration Declarations
Rule 14    Declarations -> empty
Rule 15    Declaration -> Type ID ;
Rule 16    Type -> INT
Rule 17    Type -> BOOL
Rule 18    Type -> FLOAT
Rule 19    Type -> CHAR
Rule 20    Statements -> Statement Statements
Rule 21    Statements -> empty
Rule 22    Statement -> ;
Rule 23    Statement -> Block
Rule 24    Statement -> Assignment
Rule 25    Statement -> IfStatement
Rule 26    Statement -> WhileStatement
Rule 27    Statement -> ReturnStatement
Rule 28    Statement -> FunctionCallStatement
Rule 29    Block -> { Statements }
Rule 30    Assignment -> ID = Expression ;
Rule 31    IfStatement -> IF ( Expression ) Statement
Rule 32    IfStatement -> IF ( Expression ) Statement ELSE Statement
Rule 33    WhileStatement -> WHILE ( Expression ) Statement
Rule 34    ReturnStatement -> RETURN Expression ;
Rule 35    ReturnStatement -> RETURN ;
Rule 36    Expression -> Conjunction
Rule 37    Expression -> Expression OR Conjunction
Rule 38    Conjunction -> Equality
Rule 39    Conjunction -> Conjunction AND Equality
Rule 40    Equality -> Relation
Rule 41    Equality -> Relation EquOp Relation
Rule 42    EquOp -> EQ
Rule 43    EquOp -> NEQ
Rule 44    Relation -> Addition
Rule 45    Relation -> Addition RelOp Addition
Rule 46    RelOp -> <
Rule 47    RelOp -> LE
Rule 48    RelOp -> >
Rule 49    RelOp -> GE
Rule 50    Addition -> Term
Rule 51    Addition -> Addition AddOp Term
Rule 52    AddOp -> +
Rule 53    AddOp -> -
Rule 54    Term -> Factor
Rule 55    Term -> Term MulOp Factor
Rule 56    MulOp -> *
Rule 57    MulOp -> /
Rule 58    MulOp -> %
Rule 59    Factor -> Primary
Rule 60    Factor -> UnaryOp Primary
Rule 61    UnaryOp -> -
Rule 62    UnaryOp -> !
Rule 63    Primary -> FLOATLIT
Rule 64    Primary -> INTLIT
Rule 65    Primary -> ID
Rule 66    Primary -> ( Expression )

Terminals, with rules where they appear

!                    : 62
%                    : 58
(                    : 3 4 5 6 31 32 33 66
)                    : 3 4 5 6 31 32 33 66
*                    : 56
+                    : 52
,                    : 8 10
-                    : 53 61
/                    : 57
;                    : 5 6 15 22 30 34 35
<                    : 46
=                    : 30
>                    : 48
AND                  : 39
BOOL                 : 17
CHAR                 : 19
ELSE                 : 32
EQ                   : 42
FLOAT                : 18
FLOATLIT             : 63
GE                   : 49
ID                   : 3 4 5 6 11 15 30 65
IF                   : 31 32
INT                  : 16
INTLIT               : 64
LE                   : 47
NEQ                  : 43
OR                   : 37
RETURN               : 34 35
WHILE                : 33
error                : 
{                    : 3 4 29
}                    : 3 4 29

Nonterminals, with rules where they appear

AddOp                : 51
Addition             : 44 45 45 51
ArgumentsList        : 5 8
Assignment           : 24
Block                : 23
Conjunction          : 36 37 39
Declaration          : 13
Declarations         : 3 4 13
EquOp                : 41
Equality             : 38 39
Expression           : 7 8 30 31 32 33 34 37 66
Factor               : 54 55
Function             : 1
FunctionCallStatement : 28
Functions            : 1 0
IfStatement          : 25
MulOp                : 55
Parameter            : 9 10
ParameterList        : 3 10
Primary              : 59 60
RelOp                : 45
Relation             : 40 41 41
ReturnStatement      : 27
Statement            : 20 31 32 32 33
Statements           : 3 4 20 29
Term                 : 50 51 55
Type                 : 3 4 11 15
UnaryOp              : 60
WhileStatement       : 26
empty                : 2 14 21

Parsing method: LALR

state 0

    (0) S' -> . Functions
    (1) Functions -> . Function Functions
    (2) Functions -> . empty
    (3) Function -> . Type ID ( ParameterList ) { Declarations Statements }
    (4) Function -> . Type ID ( ) { Declarations Statements }
    (12) empty -> .
    (16) Type -> . INT
    (17) Type -> . BOOL
    (18) Type -> . FLOAT
    (19) Type -> . CHAR

    $end            reduce using rule 12 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Functions                      shift and go to state 1
    Function                       shift and go to state 2
    empty                          shift and go to state 3
    Type                           shift and go to state 4

state 1

    (0) S' -> Functions .



state 2

    (1) Functions -> Function . Functions
    (1) Functions -> . Function Functions
    (2) Functions -> . empty
    (3) Function -> . Type ID ( ParameterList ) { Declarations Statements }
    (4) Function -> . Type ID ( ) { Declarations Statements }
    (12) empty -> .
    (16) Type -> . INT
    (17) Type -> . BOOL
    (18) Type -> . FLOAT
    (19) Type -> . CHAR

    $end            reduce using rule 12 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Function                       shift and go to state 2
    Functions                      shift and go to state 9
    empty                          shift and go to state 3
    Type                           shift and go to state 4

state 3

    (2) Functions -> empty .

    $end            reduce using rule 2 (Functions -> empty .)


state 4

    (3) Function -> Type . ID ( ParameterList ) { Declarations Statements }
    (4) Function -> Type . ID ( ) { Declarations Statements }

    ID              shift and go to state 10


state 5

    (16) Type -> INT .

    ID              reduce using rule 16 (Type -> INT .)


state 6

    (17) Type -> BOOL .

    ID              reduce using rule 17 (Type -> BOOL .)


state 7

    (18) Type -> FLOAT .

    ID              reduce using rule 18 (Type -> FLOAT .)


state 8

    (19) Type -> CHAR .

    ID              reduce using rule 19 (Type -> CHAR .)


state 9

    (1) Functions -> Function Functions .

    $end            reduce using rule 1 (Functions -> Function Functions .)


state 10

    (3) Function -> Type ID . ( ParameterList ) { Declarations Statements }
    (4) Function -> Type ID . ( ) { Declarations Statements }

    (               shift and go to state 11


state 11

    (3) Function -> Type ID ( . ParameterList ) { Declarations Statements }
    (4) Function -> Type ID ( . ) { Declarations Statements }
    (9) ParameterList -> . Parameter
    (10) ParameterList -> . ParameterList , Parameter
    (11) Parameter -> . Type ID
    (16) Type -> . INT
    (17) Type -> . BOOL
    (18) Type -> . FLOAT
    (19) Type -> . CHAR

    )               shift and go to state 14
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Type                           shift and go to state 12
    ParameterList                  shift and go to state 13
    Parameter                      shift and go to state 15

state 12

    (11) Parameter -> Type . ID

    ID              shift and go to state 16


state 13

    (3) Function -> Type ID ( ParameterList . ) { Declarations Statements }
    (10) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 17
    ,               shift and go to state 18


state 14

    (4) Function -> Type ID ( ) . { Declarations Statements }

    {               shift and go to state 19


state 15

    (9) ParameterList -> Parameter .

    )               reduce using rule 9 (ParameterList -> Parameter .)
    ,               reduce using rule 9 (ParameterList -> Parameter .)


state 16

    (11) Parameter -> Type ID .

    )               reduce using rule 11 (Parameter -> Type ID .)
    ,               reduce using rule 11 (Parameter -> Type ID .)


state 17

    (3) Function -> Type ID ( ParameterList ) . { Declarations Statements }

    {               shift and go to state 20


state 18

    (10) ParameterList -> ParameterList , . Parameter
    (11) Parameter -> . Type ID
    (16) Type -> . INT
    (17) Type -> . BOOL
    (18) Type -> . FLOAT
    (19) Type -> . CHAR

    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Parameter                      shift and go to state 21
    Type                           shift and go to state 12

state 19

    (4) Function -> Type ID ( ) { . Declarations Statements }
    (13) Declarations -> . Declaration Declarations
    (14) Declarations -> . empty
    (15) Declaration -> . Type ID ;
    (12) empty -> .
    (16) Type -> . INT
    (17) Type -> . BOOL
    (18) Type -> . FLOAT
    (19) Type -> . CHAR

    ;               reduce using rule 12 (empty -> .)
    {               reduce using rule 12 (empty -> .)
    ID              reduce using rule 12 (empty -> .)
    IF              reduce using rule 12 (empty -> .)
    WHILE           reduce using rule 12 (empty -> .)
    RETURN          reduce using rule 12 (empty -> .)
    }               reduce using rule 12 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Type                           shift and go to state 22
    Declarations                   shift and go to state 23
    Declaration                    shift and go to state 24
    empty                          shift and go to state 25

state 20

    (3) Function -> Type ID ( ParameterList ) { . Declarations Statements }
    (13) Declarations -> . Declaration Declarations
    (14) Declarations -> . empty
    (15) Declaration -> . Type ID ;
    (12) empty -> .
    (16) Type -> . INT
    (17) Type -> . BOOL
    (18) Type -> . FLOAT
    (19) Type -> . CHAR

    ;               reduce using rule 12 (empty -> .)
    {               reduce using rule 12 (empty -> .)
    ID              reduce using rule 12 (empty -> .)
    IF              reduce using rule 12 (empty -> .)
    WHILE           reduce using rule 12 (empty -> .)
    RETURN          reduce using rule 12 (empty -> .)
    }               reduce using rule 12 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Type                           shift and go to state 22
    Declarations                   shift and go to state 26
    Declaration                    shift and go to state 24
    empty                          shift and go to state 25

state 21

    (10) ParameterList -> ParameterList , Parameter .

    )               reduce using rule 10 (ParameterList -> ParameterList , Parameter .)
    ,               reduce using rule 10 (ParameterList -> ParameterList , Parameter .)


state 22

    (15) Declaration -> Type . ID ;

    ID              shift and go to state 27


state 23

    (4) Function -> Type ID ( ) { Declarations . Statements }
    (20) Statements -> . Statement Statements
    (21) Statements -> . empty
    (22) Statement -> . ;
    (23) Statement -> . Block
    (24) Statement -> . Assignment
    (25) Statement -> . IfStatement
    (26) Statement -> . WhileStatement
    (27) Statement -> . ReturnStatement
    (28) Statement -> . FunctionCallStatement
    (12) empty -> .
    (29) Block -> . { Statements }
    (30) Assignment -> . ID = Expression ;
    (31) IfStatement -> . IF ( Expression ) Statement
    (32) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (33) WhileStatement -> . WHILE ( Expression ) Statement
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (5) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (6) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    }               reduce using rule 12 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    RETURN          shift and go to state 42

    Statements                     shift and go to state 30
    Statement                      shift and go to state 31
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38
    FunctionCallStatement          shift and go to state 39

state 24

    (13) Declarations -> Declaration . Declarations
    (13) Declarations -> . Declaration Declarations
    (14) Declarations -> . empty
    (15) Declaration -> . Type ID ;
    (12) empty -> .
    (16) Type -> . INT
    (17) Type -> . BOOL
    (18) Type -> . FLOAT
    (19) Type -> . CHAR

    ;               reduce using rule 12 (empty -> .)
    {               reduce using rule 12 (empty -> .)
    ID              reduce using rule 12 (empty -> .)
    IF              reduce using rule 12 (empty -> .)
    WHILE           reduce using rule 12 (empty -> .)
    RETURN          reduce using rule 12 (empty -> .)
    }               reduce using rule 12 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Declaration                    shift and go to state 24
    Declarations                   shift and go to state 43
    empty                          shift and go to state 25
    Type                           shift and go to state 22

state 25

    (14) Declarations -> empty .

    ;               reduce using rule 14 (Declarations -> empty .)
    {               reduce using rule 14 (Declarations -> empty .)
    ID              reduce using rule 14 (Declarations -> empty .)
    IF              reduce using rule 14 (Declarations -> empty .)
    WHILE           reduce using rule 14 (Declarations -> empty .)
    RETURN          reduce using rule 14 (Declarations -> empty .)
    }               reduce using rule 14 (Declarations -> empty .)


state 26

    (3) Function -> Type ID ( ParameterList ) { Declarations . Statements }
    (20) Statements -> . Statement Statements
    (21) Statements -> . empty
    (22) Statement -> . ;
    (23) Statement -> . Block
    (24) Statement -> . Assignment
    (25) Statement -> . IfStatement
    (26) Statement -> . WhileStatement
    (27) Statement -> . ReturnStatement
    (28) Statement -> . FunctionCallStatement
    (12) empty -> .
    (29) Block -> . { Statements }
    (30) Assignment -> . ID = Expression ;
    (31) IfStatement -> . IF ( Expression ) Statement
    (32) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (33) WhileStatement -> . WHILE ( Expression ) Statement
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (5) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (6) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    }               reduce using rule 12 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    RETURN          shift and go to state 42

    Statements                     shift and go to state 44
    Statement                      shift and go to state 31
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38
    FunctionCallStatement          shift and go to state 39

state 27

    (15) Declaration -> Type ID . ;

    ;               shift and go to state 45


state 28

    (30) Assignment -> ID . = Expression ;
    (5) FunctionCallStatement -> ID . ( ArgumentsList ) ;
    (6) FunctionCallStatement -> ID . ( ) ;

    =               shift and go to state 46
    (               shift and go to state 47


state 29

    (29) Block -> { . Statements }
    (20) Statements -> . Statement Statements
    (21) Statements -> . empty
    (22) Statement -> . ;
    (23) Statement -> . Block
    (24) Statement -> . Assignment
    (25) Statement -> . IfStatement
    (26) Statement -> . WhileStatement
    (27) Statement -> . ReturnStatement
    (28) Statement -> . FunctionCallStatement
    (12) empty -> .
    (29) Block -> . { Statements }
    (30) Assignment -> . ID = Expression ;
    (31) IfStatement -> . IF ( Expression ) Statement
    (32) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (33) WhileStatement -> . WHILE ( Expression ) Statement
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (5) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (6) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    }               reduce using rule 12 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    RETURN          shift and go to state 42

    Statements                     shift and go to state 48
    Statement                      shift and go to state 31
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38
    FunctionCallStatement          shift and go to state 39

state 30

    (4) Function -> Type ID ( ) { Declarations Statements . }

    }               shift and go to state 49


state 31

    (20) Statements -> Statement . Statements
    (20) Statements -> . Statement Statements
    (21) Statements -> . empty
    (22) Statement -> . ;
    (23) Statement -> . Block
    (24) Statement -> . Assignment
    (25) Statement -> . IfStatement
    (26) Statement -> . WhileStatement
    (27) Statement -> . ReturnStatement
    (28) Statement -> . FunctionCallStatement
    (12) empty -> .
    (29) Block -> . { Statements }
    (30) Assignment -> . ID = Expression ;
    (31) IfStatement -> . IF ( Expression ) Statement
    (32) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (33) WhileStatement -> . WHILE ( Expression ) Statement
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (5) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (6) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    }               reduce using rule 12 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    RETURN          shift and go to state 42

    Statement                      shift and go to state 31
    Statements                     shift and go to state 50
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38
    FunctionCallStatement          shift and go to state 39

state 32

    (21) Statements -> empty .

    }               reduce using rule 21 (Statements -> empty .)


state 33

    (22) Statement -> ; .

    ;               reduce using rule 22 (Statement -> ; .)
    {               reduce using rule 22 (Statement -> ; .)
    ID              reduce using rule 22 (Statement -> ; .)
    IF              reduce using rule 22 (Statement -> ; .)
    WHILE           reduce using rule 22 (Statement -> ; .)
    RETURN          reduce using rule 22 (Statement -> ; .)
    }               reduce using rule 22 (Statement -> ; .)
    ELSE            reduce using rule 22 (Statement -> ; .)


state 34

    (23) Statement -> Block .

    ;               reduce using rule 23 (Statement -> Block .)
    {               reduce using rule 23 (Statement -> Block .)
    ID              reduce using rule 23 (Statement -> Block .)
    IF              reduce using rule 23 (Statement -> Block .)
    WHILE           reduce using rule 23 (Statement -> Block .)
    RETURN          reduce using rule 23 (Statement -> Block .)
    }               reduce using rule 23 (Statement -> Block .)
    ELSE            reduce using rule 23 (Statement -> Block .)


state 35

    (24) Statement -> Assignment .

    ;               reduce using rule 24 (Statement -> Assignment .)
    {               reduce using rule 24 (Statement -> Assignment .)
    ID              reduce using rule 24 (Statement -> Assignment .)
    IF              reduce using rule 24 (Statement -> Assignment .)
    WHILE           reduce using rule 24 (Statement -> Assignment .)
    RETURN          reduce using rule 24 (Statement -> Assignment .)
    }               reduce using rule 24 (Statement -> Assignment .)
    ELSE            reduce using rule 24 (Statement -> Assignment .)


state 36

    (25) Statement -> IfStatement .

    ;               reduce using rule 25 (Statement -> IfStatement .)
    {               reduce using rule 25 (Statement -> IfStatement .)
    ID              reduce using rule 25 (Statement -> IfStatement .)
    IF              reduce using rule 25 (Statement -> IfStatement .)
    WHILE           reduce using rule 25 (Statement -> IfStatement .)
    RETURN          reduce using rule 25 (Statement -> IfStatement .)
    }               reduce using rule 25 (Statement -> IfStatement .)
    ELSE            reduce using rule 25 (Statement -> IfStatement .)


state 37

    (26) Statement -> WhileStatement .

    ;               reduce using rule 26 (Statement -> WhileStatement .)
    {               reduce using rule 26 (Statement -> WhileStatement .)
    ID              reduce using rule 26 (Statement -> WhileStatement .)
    IF              reduce using rule 26 (Statement -> WhileStatement .)
    WHILE           reduce using rule 26 (Statement -> WhileStatement .)
    RETURN          reduce using rule 26 (Statement -> WhileStatement .)
    }               reduce using rule 26 (Statement -> WhileStatement .)
    ELSE            reduce using rule 26 (Statement -> WhileStatement .)


state 38

    (27) Statement -> ReturnStatement .

    ;               reduce using rule 27 (Statement -> ReturnStatement .)
    {               reduce using rule 27 (Statement -> ReturnStatement .)
    ID              reduce using rule 27 (Statement -> ReturnStatement .)
    IF              reduce using rule 27 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 27 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 27 (Statement -> ReturnStatement .)
    }               reduce using rule 27 (Statement -> ReturnStatement .)
    ELSE            reduce using rule 27 (Statement -> ReturnStatement .)


state 39

    (28) Statement -> FunctionCallStatement .

    ;               reduce using rule 28 (Statement -> FunctionCallStatement .)
    {               reduce using rule 28 (Statement -> FunctionCallStatement .)
    ID              reduce using rule 28 (Statement -> FunctionCallStatement .)
    IF              reduce using rule 28 (Statement -> FunctionCallStatement .)
    WHILE           reduce using rule 28 (Statement -> FunctionCallStatement .)
    RETURN          reduce using rule 28 (Statement -> FunctionCallStatement .)
    }               reduce using rule 28 (Statement -> FunctionCallStatement .)
    ELSE            reduce using rule 28 (Statement -> FunctionCallStatement .)


state 40

    (31) IfStatement -> IF . ( Expression ) Statement
    (32) IfStatement -> IF . ( Expression ) Statement ELSE Statement

    (               shift and go to state 51


state 41

    (33) WhileStatement -> WHILE . ( Expression ) Statement

    (               shift and go to state 52


state 42

    (34) ReturnStatement -> RETURN . Expression ;
    (35) ReturnStatement -> RETURN . ;
    (36) Expression -> . Conjunction
    (37) Expression -> . Expression OR Conjunction
    (38) Conjunction -> . Equality
    (39) Conjunction -> . Conjunction AND Equality
    (40) Equality -> . Relation
    (41) Equality -> . Relation EquOp Relation
    (44) Relation -> . Addition
    (45) Relation -> . Addition RelOp Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    ;               shift and go to state 54
    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Expression                     shift and go to state 53
    Conjunction                    shift and go to state 55
    Equality                       shift and go to state 56
    Relation                       shift and go to state 57
    Addition                       shift and go to state 58
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 43

    (13) Declarations -> Declaration Declarations .

    ;               reduce using rule 13 (Declarations -> Declaration Declarations .)
    {               reduce using rule 13 (Declarations -> Declaration Declarations .)
    ID              reduce using rule 13 (Declarations -> Declaration Declarations .)
    IF              reduce using rule 13 (Declarations -> Declaration Declarations .)
    WHILE           reduce using rule 13 (Declarations -> Declaration Declarations .)
    RETURN          reduce using rule 13 (Declarations -> Declaration Declarations .)
    }               reduce using rule 13 (Declarations -> Declaration Declarations .)


state 44

    (3) Function -> Type ID ( ParameterList ) { Declarations Statements . }

    }               shift and go to state 69


state 45

    (15) Declaration -> Type ID ; .

    INT             reduce using rule 15 (Declaration -> Type ID ; .)
    BOOL            reduce using rule 15 (Declaration -> Type ID ; .)
    FLOAT           reduce using rule 15 (Declaration -> Type ID ; .)
    CHAR            reduce using rule 15 (Declaration -> Type ID ; .)
    ;               reduce using rule 15 (Declaration -> Type ID ; .)
    {               reduce using rule 15 (Declaration -> Type ID ; .)
    ID              reduce using rule 15 (Declaration -> Type ID ; .)
    IF              reduce using rule 15 (Declaration -> Type ID ; .)
    WHILE           reduce using rule 15 (Declaration -> Type ID ; .)
    RETURN          reduce using rule 15 (Declaration -> Type ID ; .)
    }               reduce using rule 15 (Declaration -> Type ID ; .)


state 46

    (30) Assignment -> ID = . Expression ;
    (36) Expression -> . Conjunction
    (37) Expression -> . Expression OR Conjunction
    (38) Conjunction -> . Equality
    (39) Conjunction -> . Conjunction AND Equality
    (40) Equality -> . Relation
    (41) Equality -> . Relation EquOp Relation
    (44) Relation -> . Addition
    (45) Relation -> . Addition RelOp Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Expression                     shift and go to state 70
    Conjunction                    shift and go to state 55
    Equality                       shift and go to state 56
    Relation                       shift and go to state 57
    Addition                       shift and go to state 58
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 47

    (5) FunctionCallStatement -> ID ( . ArgumentsList ) ;
    (6) FunctionCallStatement -> ID ( . ) ;
    (7) ArgumentsList -> . Expression
    (8) ArgumentsList -> . ArgumentsList , Expression
    (36) Expression -> . Conjunction
    (37) Expression -> . Expression OR Conjunction
    (38) Conjunction -> . Equality
    (39) Conjunction -> . Conjunction AND Equality
    (40) Equality -> . Relation
    (41) Equality -> . Relation EquOp Relation
    (44) Relation -> . Addition
    (45) Relation -> . Addition RelOp Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    )               shift and go to state 72
    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    ArgumentsList                  shift and go to state 71
    Expression                     shift and go to state 73
    Conjunction                    shift and go to state 55
    Equality                       shift and go to state 56
    Relation                       shift and go to state 57
    Addition                       shift and go to state 58
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 48

    (29) Block -> { Statements . }

    }               shift and go to state 74


state 49

    (4) Function -> Type ID ( ) { Declarations Statements } .

    INT             reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    BOOL            reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    FLOAT           reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    CHAR            reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    $end            reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)


state 50

    (20) Statements -> Statement Statements .

    }               reduce using rule 20 (Statements -> Statement Statements .)


state 51

    (31) IfStatement -> IF ( . Expression ) Statement
    (32) IfStatement -> IF ( . Expression ) Statement ELSE Statement
    (36) Expression -> . Conjunction
    (37) Expression -> . Expression OR Conjunction
    (38) Conjunction -> . Equality
    (39) Conjunction -> . Conjunction AND Equality
    (40) Equality -> . Relation
    (41) Equality -> . Relation EquOp Relation
    (44) Relation -> . Addition
    (45) Relation -> . Addition RelOp Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Expression                     shift and go to state 75
    Conjunction                    shift and go to state 55
    Equality                       shift and go to state 56
    Relation                       shift and go to state 57
    Addition                       shift and go to state 58
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 52

    (33) WhileStatement -> WHILE ( . Expression ) Statement
    (36) Expression -> . Conjunction
    (37) Expression -> . Expression OR Conjunction
    (38) Conjunction -> . Equality
    (39) Conjunction -> . Conjunction AND Equality
    (40) Equality -> . Relation
    (41) Equality -> . Relation EquOp Relation
    (44) Relation -> . Addition
    (45) Relation -> . Addition RelOp Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Expression                     shift and go to state 76
    Conjunction                    shift and go to state 55
    Equality                       shift and go to state 56
    Relation                       shift and go to state 57
    Addition                       shift and go to state 58
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 53

    (34) ReturnStatement -> RETURN Expression . ;
    (37) Expression -> Expression . OR Conjunction

    ;               shift and go to state 77
    OR              shift and go to state 78


state 54

    (35) ReturnStatement -> RETURN ; .

    ;               reduce using rule 35 (ReturnStatement -> RETURN ; .)
    {               reduce using rule 35 (ReturnStatement -> RETURN ; .)
    ID              reduce using rule 35 (ReturnStatement -> RETURN ; .)
    IF              reduce using rule 35 (ReturnStatement -> RETURN ; .)
    WHILE           reduce using rule 35 (ReturnStatement -> RETURN ; .)
    RETURN          reduce using rule 35 (ReturnStatement -> RETURN ; .)
    }               reduce using rule 35 (ReturnStatement -> RETURN ; .)
    ELSE            reduce using rule 35 (ReturnStatement -> RETURN ; .)


state 55

    (36) Expression -> Conjunction .
    (39) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 36 (Expression -> Conjunction .)
    OR              reduce using rule 36 (Expression -> Conjunction .)
    )               reduce using rule 36 (Expression -> Conjunction .)
    ,               reduce using rule 36 (Expression -> Conjunction .)
    AND             shift and go to state 79


state 56

    (38) Conjunction -> Equality .

    AND             reduce using rule 38 (Conjunction -> Equality .)
    ;               reduce using rule 38 (Conjunction -> Equality .)
    OR              reduce using rule 38 (Conjunction -> Equality .)
    )               reduce using rule 38 (Conjunction -> Equality .)
    ,               reduce using rule 38 (Conjunction -> Equality .)


state 57

    (40) Equality -> Relation .
    (41) Equality -> Relation . EquOp Relation
    (42) EquOp -> . EQ
    (43) EquOp -> . NEQ

    AND             reduce using rule 40 (Equality -> Relation .)
    ;               reduce using rule 40 (Equality -> Relation .)
    OR              reduce using rule 40 (Equality -> Relation .)
    )               reduce using rule 40 (Equality -> Relation .)
    ,               reduce using rule 40 (Equality -> Relation .)
    EQ              shift and go to state 81
    NEQ             shift and go to state 82

    EquOp                          shift and go to state 80

state 58

    (44) Relation -> Addition .
    (45) Relation -> Addition . RelOp Addition
    (51) Addition -> Addition . AddOp Term
    (46) RelOp -> . <
    (47) RelOp -> . LE
    (48) RelOp -> . >
    (49) RelOp -> . GE
    (52) AddOp -> . +
    (53) AddOp -> . -

    EQ              reduce using rule 44 (Relation -> Addition .)
    NEQ             reduce using rule 44 (Relation -> Addition .)
    AND             reduce using rule 44 (Relation -> Addition .)
    ;               reduce using rule 44 (Relation -> Addition .)
    OR              reduce using rule 44 (Relation -> Addition .)
    )               reduce using rule 44 (Relation -> Addition .)
    ,               reduce using rule 44 (Relation -> Addition .)
    <               shift and go to state 85
    LE              shift and go to state 86
    >               shift and go to state 87
    GE              shift and go to state 88
    +               shift and go to state 89
    -               shift and go to state 90

    RelOp                          shift and go to state 83
    AddOp                          shift and go to state 84

state 59

    (50) Addition -> Term .
    (55) Term -> Term . MulOp Factor
    (56) MulOp -> . *
    (57) MulOp -> . /
    (58) MulOp -> . %

    <               reduce using rule 50 (Addition -> Term .)
    LE              reduce using rule 50 (Addition -> Term .)
    >               reduce using rule 50 (Addition -> Term .)
    GE              reduce using rule 50 (Addition -> Term .)
    +               reduce using rule 50 (Addition -> Term .)
    -               reduce using rule 50 (Addition -> Term .)
    EQ              reduce using rule 50 (Addition -> Term .)
    NEQ             reduce using rule 50 (Addition -> Term .)
    AND             reduce using rule 50 (Addition -> Term .)
    ;               reduce using rule 50 (Addition -> Term .)
    OR              reduce using rule 50 (Addition -> Term .)
    )               reduce using rule 50 (Addition -> Term .)
    ,               reduce using rule 50 (Addition -> Term .)
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

    MulOp                          shift and go to state 91

state 60

    (54) Term -> Factor .

    *               reduce using rule 54 (Term -> Factor .)
    /               reduce using rule 54 (Term -> Factor .)
    %               reduce using rule 54 (Term -> Factor .)
    <               reduce using rule 54 (Term -> Factor .)
    LE              reduce using rule 54 (Term -> Factor .)
    >               reduce using rule 54 (Term -> Factor .)
    GE              reduce using rule 54 (Term -> Factor .)
    +               reduce using rule 54 (Term -> Factor .)
    -               reduce using rule 54 (Term -> Factor .)
    EQ              reduce using rule 54 (Term -> Factor .)
    NEQ             reduce using rule 54 (Term -> Factor .)
    AND             reduce using rule 54 (Term -> Factor .)
    ;               reduce using rule 54 (Term -> Factor .)
    OR              reduce using rule 54 (Term -> Factor .)
    )               reduce using rule 54 (Term -> Factor .)
    ,               reduce using rule 54 (Term -> Factor .)


state 61

    (59) Factor -> Primary .

    *               reduce using rule 59 (Factor -> Primary .)
    /               reduce using rule 59 (Factor -> Primary .)
    %               reduce using rule 59 (Factor -> Primary .)
    <               reduce using rule 59 (Factor -> Primary .)
    LE              reduce using rule 59 (Factor -> Primary .)
    >               reduce using rule 59 (Factor -> Primary .)
    GE              reduce using rule 59 (Factor -> Primary .)
    +               reduce using rule 59 (Factor -> Primary .)
    -               reduce using rule 59 (Factor -> Primary .)
    EQ              reduce using rule 59 (Factor -> Primary .)
    NEQ             reduce using rule 59 (Factor -> Primary .)
    AND             reduce using rule 59 (Factor -> Primary .)
    ;               reduce using rule 59 (Factor -> Primary .)
    OR              reduce using rule 59 (Factor -> Primary .)
    )               reduce using rule 59 (Factor -> Primary .)
    ,               reduce using rule 59 (Factor -> Primary .)


state 62

    (60) Factor -> UnaryOp . Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66

    Primary                        shift and go to state 95

state 63

    (63) Primary -> FLOATLIT .

    *               reduce using rule 63 (Primary -> FLOATLIT .)
    /               reduce using rule 63 (Primary -> FLOATLIT .)
    %               reduce using rule 63 (Primary -> FLOATLIT .)
    <               reduce using rule 63 (Primary -> FLOATLIT .)
    LE              reduce using rule 63 (Primary -> FLOATLIT .)
    >               reduce using rule 63 (Primary -> FLOATLIT .)
    GE              reduce using rule 63 (Primary -> FLOATLIT .)
    +               reduce using rule 63 (Primary -> FLOATLIT .)
    -               reduce using rule 63 (Primary -> FLOATLIT .)
    EQ              reduce using rule 63 (Primary -> FLOATLIT .)
    NEQ             reduce using rule 63 (Primary -> FLOATLIT .)
    AND             reduce using rule 63 (Primary -> FLOATLIT .)
    ;               reduce using rule 63 (Primary -> FLOATLIT .)
    OR              reduce using rule 63 (Primary -> FLOATLIT .)
    )               reduce using rule 63 (Primary -> FLOATLIT .)
    ,               reduce using rule 63 (Primary -> FLOATLIT .)


state 64

    (64) Primary -> INTLIT .

    *               reduce using rule 64 (Primary -> INTLIT .)
    /               reduce using rule 64 (Primary -> INTLIT .)
    %               reduce using rule 64 (Primary -> INTLIT .)
    <               reduce using rule 64 (Primary -> INTLIT .)
    LE              reduce using rule 64 (Primary -> INTLIT .)
    >               reduce using rule 64 (Primary -> INTLIT .)
    GE              reduce using rule 64 (Primary -> INTLIT .)
    +               reduce using rule 64 (Primary -> INTLIT .)
    -               reduce using rule 64 (Primary -> INTLIT .)
    EQ              reduce using rule 64 (Primary -> INTLIT .)
    NEQ             reduce using rule 64 (Primary -> INTLIT .)
    AND             reduce using rule 64 (Primary -> INTLIT .)
    ;               reduce using rule 64 (Primary -> INTLIT .)
    OR              reduce using rule 64 (Primary -> INTLIT .)
    )               reduce using rule 64 (Primary -> INTLIT .)
    ,               reduce using rule 64 (Primary -> INTLIT .)


state 65

    (65) Primary -> ID .

    *               reduce using rule 65 (Primary -> ID .)
    /               reduce using rule 65 (Primary -> ID .)
    %               reduce using rule 65 (Primary -> ID .)
    <               reduce using rule 65 (Primary -> ID .)
    LE              reduce using rule 65 (Primary -> ID .)
    >               reduce using rule 65 (Primary -> ID .)
    GE              reduce using rule 65 (Primary -> ID .)
    +               reduce using rule 65 (Primary -> ID .)
    -               reduce using rule 65 (Primary -> ID .)
    EQ              reduce using rule 65 (Primary -> ID .)
    NEQ             reduce using rule 65 (Primary -> ID .)
    AND             reduce using rule 65 (Primary -> ID .)
    ;               reduce using rule 65 (Primary -> ID .)
    OR              reduce using rule 65 (Primary -> ID .)
    )               reduce using rule 65 (Primary -> ID .)
    ,               reduce using rule 65 (Primary -> ID .)


state 66

    (66) Primary -> ( . Expression )
    (36) Expression -> . Conjunction
    (37) Expression -> . Expression OR Conjunction
    (38) Conjunction -> . Equality
    (39) Conjunction -> . Conjunction AND Equality
    (40) Equality -> . Relation
    (41) Equality -> . Relation EquOp Relation
    (44) Relation -> . Addition
    (45) Relation -> . Addition RelOp Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Expression                     shift and go to state 96
    Conjunction                    shift and go to state 55
    Equality                       shift and go to state 56
    Relation                       shift and go to state 57
    Addition                       shift and go to state 58
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 67

    (61) UnaryOp -> - .

    FLOATLIT        reduce using rule 61 (UnaryOp -> - .)
    INTLIT          reduce using rule 61 (UnaryOp -> - .)
    ID              reduce using rule 61 (UnaryOp -> - .)
    (               reduce using rule 61 (UnaryOp -> - .)


state 68

    (62) UnaryOp -> ! .

    FLOATLIT        reduce using rule 62 (UnaryOp -> ! .)
    INTLIT          reduce using rule 62 (UnaryOp -> ! .)
    ID              reduce using rule 62 (UnaryOp -> ! .)
    (               reduce using rule 62 (UnaryOp -> ! .)


state 69

    (3) Function -> Type ID ( ParameterList ) { Declarations Statements } .

    INT             reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    BOOL            reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    FLOAT           reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    CHAR            reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    $end            reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)


state 70

    (30) Assignment -> ID = Expression . ;
    (37) Expression -> Expression . OR Conjunction

    ;               shift and go to state 97
    OR              shift and go to state 78


state 71

    (5) FunctionCallStatement -> ID ( ArgumentsList . ) ;
    (8) ArgumentsList -> ArgumentsList . , Expression

    )               shift and go to state 98
    ,               shift and go to state 99


state 72

    (6) FunctionCallStatement -> ID ( ) . ;

    ;               shift and go to state 100


state 73

    (7) ArgumentsList -> Expression .
    (37) Expression -> Expression . OR Conjunction

    )               reduce using rule 7 (ArgumentsList -> Expression .)
    ,               reduce using rule 7 (ArgumentsList -> Expression .)
    OR              shift and go to state 78


state 74

    (29) Block -> { Statements } .

    ;               reduce using rule 29 (Block -> { Statements } .)
    {               reduce using rule 29 (Block -> { Statements } .)
    ID              reduce using rule 29 (Block -> { Statements } .)
    IF              reduce using rule 29 (Block -> { Statements } .)
    WHILE           reduce using rule 29 (Block -> { Statements } .)
    RETURN          reduce using rule 29 (Block -> { Statements } .)
    }               reduce using rule 29 (Block -> { Statements } .)
    ELSE            reduce using rule 29 (Block -> { Statements } .)


state 75

    (31) IfStatement -> IF ( Expression . ) Statement
    (32) IfStatement -> IF ( Expression . ) Statement ELSE Statement
    (37) Expression -> Expression . OR Conjunction

    )               shift and go to state 101
    OR              shift and go to state 78


state 76

    (33) WhileStatement -> WHILE ( Expression . ) Statement
    (37) Expression -> Expression . OR Conjunction

    )               shift and go to state 102
    OR              shift and go to state 78


state 77

    (34) ReturnStatement -> RETURN Expression ; .

    ;               reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    {               reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    ID              reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    IF              reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    }               reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    ELSE            reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)


state 78

    (37) Expression -> Expression OR . Conjunction
    (38) Conjunction -> . Equality
    (39) Conjunction -> . Conjunction AND Equality
    (40) Equality -> . Relation
    (41) Equality -> . Relation EquOp Relation
    (44) Relation -> . Addition
    (45) Relation -> . Addition RelOp Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Conjunction                    shift and go to state 103
    Equality                       shift and go to state 56
    Relation                       shift and go to state 57
    Addition                       shift and go to state 58
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 79

    (39) Conjunction -> Conjunction AND . Equality
    (40) Equality -> . Relation
    (41) Equality -> . Relation EquOp Relation
    (44) Relation -> . Addition
    (45) Relation -> . Addition RelOp Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Equality                       shift and go to state 104
    Relation                       shift and go to state 57
    Addition                       shift and go to state 58
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 80

    (41) Equality -> Relation EquOp . Relation
    (44) Relation -> . Addition
    (45) Relation -> . Addition RelOp Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Relation                       shift and go to state 105
    Addition                       shift and go to state 58
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 81

    (42) EquOp -> EQ .

    FLOATLIT        reduce using rule 42 (EquOp -> EQ .)
    INTLIT          reduce using rule 42 (EquOp -> EQ .)
    ID              reduce using rule 42 (EquOp -> EQ .)
    (               reduce using rule 42 (EquOp -> EQ .)
    -               reduce using rule 42 (EquOp -> EQ .)
    !               reduce using rule 42 (EquOp -> EQ .)


state 82

    (43) EquOp -> NEQ .

    FLOATLIT        reduce using rule 43 (EquOp -> NEQ .)
    INTLIT          reduce using rule 43 (EquOp -> NEQ .)
    ID              reduce using rule 43 (EquOp -> NEQ .)
    (               reduce using rule 43 (EquOp -> NEQ .)
    -               reduce using rule 43 (EquOp -> NEQ .)
    !               reduce using rule 43 (EquOp -> NEQ .)


state 83

    (45) Relation -> Addition RelOp . Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Addition                       shift and go to state 106
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 84

    (51) Addition -> Addition AddOp . Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Term                           shift and go to state 107
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 85

    (46) RelOp -> < .

    FLOATLIT        reduce using rule 46 (RelOp -> < .)
    INTLIT          reduce using rule 46 (RelOp -> < .)
    ID              reduce using rule 46 (RelOp -> < .)
    (               reduce using rule 46 (RelOp -> < .)
    -               reduce using rule 46 (RelOp -> < .)
    !               reduce using rule 46 (RelOp -> < .)


state 86

    (47) RelOp -> LE .

    FLOATLIT        reduce using rule 47 (RelOp -> LE .)
    INTLIT          reduce using rule 47 (RelOp -> LE .)
    ID              reduce using rule 47 (RelOp -> LE .)
    (               reduce using rule 47 (RelOp -> LE .)
    -               reduce using rule 47 (RelOp -> LE .)
    !               reduce using rule 47 (RelOp -> LE .)


state 87

    (48) RelOp -> > .

    FLOATLIT        reduce using rule 48 (RelOp -> > .)
    INTLIT          reduce using rule 48 (RelOp -> > .)
    ID              reduce using rule 48 (RelOp -> > .)
    (               reduce using rule 48 (RelOp -> > .)
    -               reduce using rule 48 (RelOp -> > .)
    !               reduce using rule 48 (RelOp -> > .)


state 88

    (49) RelOp -> GE .

    FLOATLIT        reduce using rule 49 (RelOp -> GE .)
    INTLIT          reduce using rule 49 (RelOp -> GE .)
    ID              reduce using rule 49 (RelOp -> GE .)
    (               reduce using rule 49 (RelOp -> GE .)
    -               reduce using rule 49 (RelOp -> GE .)
    !               reduce using rule 49 (RelOp -> GE .)


state 89

    (52) AddOp -> + .

    FLOATLIT        reduce using rule 52 (AddOp -> + .)
    INTLIT          reduce using rule 52 (AddOp -> + .)
    ID              reduce using rule 52 (AddOp -> + .)
    (               reduce using rule 52 (AddOp -> + .)
    -               reduce using rule 52 (AddOp -> + .)
    !               reduce using rule 52 (AddOp -> + .)


state 90

    (53) AddOp -> - .

    FLOATLIT        reduce using rule 53 (AddOp -> - .)
    INTLIT          reduce using rule 53 (AddOp -> - .)
    ID              reduce using rule 53 (AddOp -> - .)
    (               reduce using rule 53 (AddOp -> - .)
    -               reduce using rule 53 (AddOp -> - .)
    !               reduce using rule 53 (AddOp -> - .)


state 91

    (55) Term -> Term MulOp . Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Factor                         shift and go to state 108
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 92

    (56) MulOp -> * .

    FLOATLIT        reduce using rule 56 (MulOp -> * .)
    INTLIT          reduce using rule 56 (MulOp -> * .)
    ID              reduce using rule 56 (MulOp -> * .)
    (               reduce using rule 56 (MulOp -> * .)
    -               reduce using rule 56 (MulOp -> * .)
    !               reduce using rule 56 (MulOp -> * .)


state 93

    (57) MulOp -> / .

    FLOATLIT        reduce using rule 57 (MulOp -> / .)
    INTLIT          reduce using rule 57 (MulOp -> / .)
    ID              reduce using rule 57 (MulOp -> / .)
    (               reduce using rule 57 (MulOp -> / .)
    -               reduce using rule 57 (MulOp -> / .)
    !               reduce using rule 57 (MulOp -> / .)


state 94

    (58) MulOp -> % .

    FLOATLIT        reduce using rule 58 (MulOp -> % .)
    INTLIT          reduce using rule 58 (MulOp -> % .)
    ID              reduce using rule 58 (MulOp -> % .)
    (               reduce using rule 58 (MulOp -> % .)
    -               reduce using rule 58 (MulOp -> % .)
    !               reduce using rule 58 (MulOp -> % .)


state 95

    (60) Factor -> UnaryOp Primary .

    *               reduce using rule 60 (Factor -> UnaryOp Primary .)
    /               reduce using rule 60 (Factor -> UnaryOp Primary .)
    %               reduce using rule 60 (Factor -> UnaryOp Primary .)
    <               reduce using rule 60 (Factor -> UnaryOp Primary .)
    LE              reduce using rule 60 (Factor -> UnaryOp Primary .)
    >               reduce using rule 60 (Factor -> UnaryOp Primary .)
    GE              reduce using rule 60 (Factor -> UnaryOp Primary .)
    +               reduce using rule 60 (Factor -> UnaryOp Primary .)
    -               reduce using rule 60 (Factor -> UnaryOp Primary .)
    EQ              reduce using rule 60 (Factor -> UnaryOp Primary .)
    NEQ             reduce using rule 60 (Factor -> UnaryOp Primary .)
    AND             reduce using rule 60 (Factor -> UnaryOp Primary .)
    ;               reduce using rule 60 (Factor -> UnaryOp Primary .)
    OR              reduce using rule 60 (Factor -> UnaryOp Primary .)
    )               reduce using rule 60 (Factor -> UnaryOp Primary .)
    ,               reduce using rule 60 (Factor -> UnaryOp Primary .)


state 96

    (66) Primary -> ( Expression . )
    (37) Expression -> Expression . OR Conjunction

    )               shift and go to state 109
    OR              shift and go to state 78


state 97

    (30) Assignment -> ID = Expression ; .

    ;               reduce using rule 30 (Assignment -> ID = Expression ; .)
    {               reduce using rule 30 (Assignment -> ID = Expression ; .)
    ID              reduce using rule 30 (Assignment -> ID = Expression ; .)
    IF              reduce using rule 30 (Assignment -> ID = Expression ; .)
    WHILE           reduce using rule 30 (Assignment -> ID = Expression ; .)
    RETURN          reduce using rule 30 (Assignment -> ID = Expression ; .)
    }               reduce using rule 30 (Assignment -> ID = Expression ; .)
    ELSE            reduce using rule 30 (Assignment -> ID = Expression ; .)


state 98

    (5) FunctionCallStatement -> ID ( ArgumentsList ) . ;

    ;               shift and go to state 110


state 99

    (8) ArgumentsList -> ArgumentsList , . Expression
    (36) Expression -> . Conjunction
    (37) Expression -> . Expression OR Conjunction
    (38) Conjunction -> . Equality
    (39) Conjunction -> . Conjunction AND Equality
    (40) Equality -> . Relation
    (41) Equality -> . Relation EquOp Relation
    (44) Relation -> . Addition
    (45) Relation -> . Addition RelOp Addition
    (50) Addition -> . Term
    (51) Addition -> . Addition AddOp Term
    (54) Term -> . Factor
    (55) Term -> . Term MulOp Factor
    (59) Factor -> . Primary
    (60) Factor -> . UnaryOp Primary
    (63) Primary -> . FLOATLIT
    (64) Primary -> . INTLIT
    (65) Primary -> . ID
    (66) Primary -> . ( Expression )
    (61) UnaryOp -> . -
    (62) UnaryOp -> . !

    FLOATLIT        shift and go to state 63
    INTLIT          shift and go to state 64
    ID              shift and go to state 65
    (               shift and go to state 66
    -               shift and go to state 67
    !               shift and go to state 68

    Expression                     shift and go to state 111
    Conjunction                    shift and go to state 55
    Equality                       shift and go to state 56
    Relation                       shift and go to state 57
    Addition                       shift and go to state 58
    Term                           shift and go to state 59
    Factor                         shift and go to state 60
    Primary                        shift and go to state 61
    UnaryOp                        shift and go to state 62

state 100

    (6) FunctionCallStatement -> ID ( ) ; .

    ;               reduce using rule 6 (FunctionCallStatement -> ID ( ) ; .)
    {               reduce using rule 6 (FunctionCallStatement -> ID ( ) ; .)
    ID              reduce using rule 6 (FunctionCallStatement -> ID ( ) ; .)
    IF              reduce using rule 6 (FunctionCallStatement -> ID ( ) ; .)
    WHILE           reduce using rule 6 (FunctionCallStatement -> ID ( ) ; .)
    RETURN          reduce using rule 6 (FunctionCallStatement -> ID ( ) ; .)
    }               reduce using rule 6 (FunctionCallStatement -> ID ( ) ; .)
    ELSE            reduce using rule 6 (FunctionCallStatement -> ID ( ) ; .)


state 101

    (31) IfStatement -> IF ( Expression ) . Statement
    (32) IfStatement -> IF ( Expression ) . Statement ELSE Statement
    (22) Statement -> . ;
    (23) Statement -> . Block
    (24) Statement -> . Assignment
    (25) Statement -> . IfStatement
    (26) Statement -> . WhileStatement
    (27) Statement -> . ReturnStatement
    (28) Statement -> . FunctionCallStatement
    (29) Block -> . { Statements }
    (30) Assignment -> . ID = Expression ;
    (31) IfStatement -> . IF ( Expression ) Statement
    (32) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (33) WhileStatement -> . WHILE ( Expression ) Statement
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (5) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (6) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    RETURN          shift and go to state 42

    Statement                      shift and go to state 112
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38
    FunctionCallStatement          shift and go to state 39

state 102

    (33) WhileStatement -> WHILE ( Expression ) . Statement
    (22) Statement -> . ;
    (23) Statement -> . Block
    (24) Statement -> . Assignment
    (25) Statement -> . IfStatement
    (26) Statement -> . WhileStatement
    (27) Statement -> . ReturnStatement
    (28) Statement -> . FunctionCallStatement
    (29) Block -> . { Statements }
    (30) Assignment -> . ID = Expression ;
    (31) IfStatement -> . IF ( Expression ) Statement
    (32) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (33) WhileStatement -> . WHILE ( Expression ) Statement
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (5) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (6) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    RETURN          shift and go to state 42

    Statement                      shift and go to state 113
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38
    FunctionCallStatement          shift and go to state 39

state 103

    (37) Expression -> Expression OR Conjunction .
    (39) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 37 (Expression -> Expression OR Conjunction .)
    OR              reduce using rule 37 (Expression -> Expression OR Conjunction .)
    )               reduce using rule 37 (Expression -> Expression OR Conjunction .)
    ,               reduce using rule 37 (Expression -> Expression OR Conjunction .)
    AND             shift and go to state 79


state 104

    (39) Conjunction -> Conjunction AND Equality .

    AND             reduce using rule 39 (Conjunction -> Conjunction AND Equality .)
    ;               reduce using rule 39 (Conjunction -> Conjunction AND Equality .)
    OR              reduce using rule 39 (Conjunction -> Conjunction AND Equality .)
    )               reduce using rule 39 (Conjunction -> Conjunction AND Equality .)
    ,               reduce using rule 39 (Conjunction -> Conjunction AND Equality .)


state 105

    (41) Equality -> Relation EquOp Relation .

    AND             reduce using rule 41 (Equality -> Relation EquOp Relation .)
    ;               reduce using rule 41 (Equality -> Relation EquOp Relation .)
    OR              reduce using rule 41 (Equality -> Relation EquOp Relation .)
    )               reduce using rule 41 (Equality -> Relation EquOp Relation .)
    ,               reduce using rule 41 (Equality -> Relation EquOp Relation .)


state 106

    (45) Relation -> Addition RelOp Addition .
    (51) Addition -> Addition . AddOp Term
    (52) AddOp -> . +
    (53) AddOp -> . -

    EQ              reduce using rule 45 (Relation -> Addition RelOp Addition .)
    NEQ             reduce using rule 45 (Relation -> Addition RelOp Addition .)
    AND             reduce using rule 45 (Relation -> Addition RelOp Addition .)
    ;               reduce using rule 45 (Relation -> Addition RelOp Addition .)
    OR              reduce using rule 45 (Relation -> Addition RelOp Addition .)
    )               reduce using rule 45 (Relation -> Addition RelOp Addition .)
    ,               reduce using rule 45 (Relation -> Addition RelOp Addition .)
    +               shift and go to state 89
    -               shift and go to state 90

    AddOp                          shift and go to state 84

state 107

    (51) Addition -> Addition AddOp Term .
    (55) Term -> Term . MulOp Factor
    (56) MulOp -> . *
    (57) MulOp -> . /
    (58) MulOp -> . %

    <               reduce using rule 51 (Addition -> Addition AddOp Term .)
    LE              reduce using rule 51 (Addition -> Addition AddOp Term .)
    >               reduce using rule 51 (Addition -> Addition AddOp Term .)
    GE              reduce using rule 51 (Addition -> Addition AddOp Term .)
    +               reduce using rule 51 (Addition -> Addition AddOp Term .)
    -               reduce using rule 51 (Addition -> Addition AddOp Term .)
    EQ              reduce using rule 51 (Addition -> Addition AddOp Term .)
    NEQ             reduce using rule 51 (Addition -> Addition AddOp Term .)
    AND             reduce using rule 51 (Addition -> Addition AddOp Term .)
    ;               reduce using rule 51 (Addition -> Addition AddOp Term .)
    OR              reduce using rule 51 (Addition -> Addition AddOp Term .)
    )               reduce using rule 51 (Addition -> Addition AddOp Term .)
    ,               reduce using rule 51 (Addition -> Addition AddOp Term .)
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

    MulOp                          shift and go to state 91

state 108

    (55) Term -> Term MulOp Factor .

    *               reduce using rule 55 (Term -> Term MulOp Factor .)
    /               reduce using rule 55 (Term -> Term MulOp Factor .)
    %               reduce using rule 55 (Term -> Term MulOp Factor .)
    <               reduce using rule 55 (Term -> Term MulOp Factor .)
    LE              reduce using rule 55 (Term -> Term MulOp Factor .)
    >               reduce using rule 55 (Term -> Term MulOp Factor .)
    GE              reduce using rule 55 (Term -> Term MulOp Factor .)
    +               reduce using rule 55 (Term -> Term MulOp Factor .)
    -               reduce using rule 55 (Term -> Term MulOp Factor .)
    EQ              reduce using rule 55 (Term -> Term MulOp Factor .)
    NEQ             reduce using rule 55 (Term -> Term MulOp Factor .)
    AND             reduce using rule 55 (Term -> Term MulOp Factor .)
    ;               reduce using rule 55 (Term -> Term MulOp Factor .)
    OR              reduce using rule 55 (Term -> Term MulOp Factor .)
    )               reduce using rule 55 (Term -> Term MulOp Factor .)
    ,               reduce using rule 55 (Term -> Term MulOp Factor .)


state 109

    (66) Primary -> ( Expression ) .

    *               reduce using rule 66 (Primary -> ( Expression ) .)
    /               reduce using rule 66 (Primary -> ( Expression ) .)
    %               reduce using rule 66 (Primary -> ( Expression ) .)
    <               reduce using rule 66 (Primary -> ( Expression ) .)
    LE              reduce using rule 66 (Primary -> ( Expression ) .)
    >               reduce using rule 66 (Primary -> ( Expression ) .)
    GE              reduce using rule 66 (Primary -> ( Expression ) .)
    +               reduce using rule 66 (Primary -> ( Expression ) .)
    -               reduce using rule 66 (Primary -> ( Expression ) .)
    EQ              reduce using rule 66 (Primary -> ( Expression ) .)
    NEQ             reduce using rule 66 (Primary -> ( Expression ) .)
    AND             reduce using rule 66 (Primary -> ( Expression ) .)
    ;               reduce using rule 66 (Primary -> ( Expression ) .)
    OR              reduce using rule 66 (Primary -> ( Expression ) .)
    )               reduce using rule 66 (Primary -> ( Expression ) .)
    ,               reduce using rule 66 (Primary -> ( Expression ) .)


state 110

    (5) FunctionCallStatement -> ID ( ArgumentsList ) ; .

    ;               reduce using rule 5 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    {               reduce using rule 5 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    ID              reduce using rule 5 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    IF              reduce using rule 5 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    WHILE           reduce using rule 5 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    RETURN          reduce using rule 5 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    }               reduce using rule 5 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)
    ELSE            reduce using rule 5 (FunctionCallStatement -> ID ( ArgumentsList ) ; .)


state 111

    (8) ArgumentsList -> ArgumentsList , Expression .
    (37) Expression -> Expression . OR Conjunction

    )               reduce using rule 8 (ArgumentsList -> ArgumentsList , Expression .)
    ,               reduce using rule 8 (ArgumentsList -> ArgumentsList , Expression .)
    OR              shift and go to state 78


state 112

    (31) IfStatement -> IF ( Expression ) Statement .
    (32) IfStatement -> IF ( Expression ) Statement . ELSE Statement

  ! shift/reduce conflict for ELSE resolved as shift
    ;               reduce using rule 31 (IfStatement -> IF ( Expression ) Statement .)
    {               reduce using rule 31 (IfStatement -> IF ( Expression ) Statement .)
    ID              reduce using rule 31 (IfStatement -> IF ( Expression ) Statement .)
    IF              reduce using rule 31 (IfStatement -> IF ( Expression ) Statement .)
    WHILE           reduce using rule 31 (IfStatement -> IF ( Expression ) Statement .)
    RETURN          reduce using rule 31 (IfStatement -> IF ( Expression ) Statement .)
    }               reduce using rule 31 (IfStatement -> IF ( Expression ) Statement .)
    ELSE            shift and go to state 114

  ! ELSE            [ reduce using rule 31 (IfStatement -> IF ( Expression ) Statement .) ]


state 113

    (33) WhileStatement -> WHILE ( Expression ) Statement .

    ;               reduce using rule 33 (WhileStatement -> WHILE ( Expression ) Statement .)
    {               reduce using rule 33 (WhileStatement -> WHILE ( Expression ) Statement .)
    ID              reduce using rule 33 (WhileStatement -> WHILE ( Expression ) Statement .)
    IF              reduce using rule 33 (WhileStatement -> WHILE ( Expression ) Statement .)
    WHILE           reduce using rule 33 (WhileStatement -> WHILE ( Expression ) Statement .)
    RETURN          reduce using rule 33 (WhileStatement -> WHILE ( Expression ) Statement .)
    }               reduce using rule 33 (WhileStatement -> WHILE ( Expression ) Statement .)
    ELSE            reduce using rule 33 (WhileStatement -> WHILE ( Expression ) Statement .)


state 114

    (32) IfStatement -> IF ( Expression ) Statement ELSE . Statement
    (22) Statement -> . ;
    (23) Statement -> . Block
    (24) Statement -> . Assignment
    (25) Statement -> . IfStatement
    (26) Statement -> . WhileStatement
    (27) Statement -> . ReturnStatement
    (28) Statement -> . FunctionCallStatement
    (29) Block -> . { Statements }
    (30) Assignment -> . ID = Expression ;
    (31) IfStatement -> . IF ( Expression ) Statement
    (32) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (33) WhileStatement -> . WHILE ( Expression ) Statement
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (5) FunctionCallStatement -> . ID ( ArgumentsList ) ;
    (6) FunctionCallStatement -> . ID ( ) ;

    ;               shift and go to state 33
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    RETURN          shift and go to state 42

    Statement                      shift and go to state 115
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38
    FunctionCallStatement          shift and go to state 39

state 115

    (32) IfStatement -> IF ( Expression ) Statement ELSE Statement .

    ;               reduce using rule 32 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    {               reduce using rule 32 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ID              reduce using rule 32 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    IF              reduce using rule 32 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    WHILE           reduce using rule 32 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    RETURN          reduce using rule 32 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    }               reduce using rule 32 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ELSE            reduce using rule 32 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 112 resolved as shift
