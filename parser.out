Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Functions
Rule 1     Functions -> Function Functions
Rule 2     Functions -> empty
Rule 3     Function -> Type ID ( ParameterList ) { Declarations Statements }
Rule 4     Function -> Type ID ( ) { Declarations Statements }
Rule 5     ParameterList -> Parameter
Rule 6     ParameterList -> ParameterList , Parameter
Rule 7     Parameter -> Type ID
Rule 8     empty -> <empty>
Rule 9     Declarations -> Declaration Declarations
Rule 10    Declarations -> empty
Rule 11    Declaration -> Type ID ;
Rule 12    Type -> INT
Rule 13    Type -> BOOL
Rule 14    Type -> FLOAT
Rule 15    Type -> CHAR
Rule 16    Statements -> Statement Statements
Rule 17    Statements -> empty
Rule 18    Statement -> ;
Rule 19    Statement -> Block
Rule 20    Statement -> Assignment
Rule 21    Statement -> IfStatement
Rule 22    Statement -> WhileStatement
Rule 23    Statement -> ReturnStatement
Rule 24    Block -> { Statements }
Rule 25    Assignment -> ID = Expression ;
Rule 26    IfStatement -> IF ( Expression ) Statement
Rule 27    IfStatement -> IF ( Expression ) Statement ELSE Statement
Rule 28    WhileStatement -> WHILE ( Expression ) Statement
Rule 29    ReturnStatement -> RETURN Expression ;
Rule 30    ReturnStatement -> RETURN ;
Rule 31    Expression -> Conjunction
Rule 32    Expression -> Expression OR Conjunction
Rule 33    Conjunction -> Equality
Rule 34    Conjunction -> Conjunction AND Equality
Rule 35    Equality -> Relation
Rule 36    Equality -> Relation EquOp Relation
Rule 37    EquOp -> EQ
Rule 38    EquOp -> NEQ
Rule 39    Relation -> Addition
Rule 40    Relation -> Addition RelOp Addition
Rule 41    RelOp -> <
Rule 42    RelOp -> LE
Rule 43    RelOp -> >
Rule 44    RelOp -> GE
Rule 45    Addition -> Term
Rule 46    Addition -> Addition AddOp Term
Rule 47    AddOp -> +
Rule 48    AddOp -> -
Rule 49    Term -> Factor
Rule 50    Term -> Term MulOp Factor
Rule 51    MulOp -> *
Rule 52    MulOp -> /
Rule 53    MulOp -> %
Rule 54    Factor -> Primary
Rule 55    Factor -> UnaryOp Primary
Rule 56    UnaryOp -> -
Rule 57    UnaryOp -> !
Rule 58    Primary -> FLOATLIT
Rule 59    Primary -> INTLIT
Rule 60    Primary -> ID
Rule 61    Primary -> ( Expression )

Terminals, with rules where they appear

!                    : 57
%                    : 53
(                    : 3 4 26 27 28 61
)                    : 3 4 26 27 28 61
*                    : 51
+                    : 47
,                    : 6
-                    : 48 56
/                    : 52
;                    : 11 18 25 29 30
<                    : 41
=                    : 25
>                    : 43
AND                  : 34
BOOL                 : 13
CHAR                 : 15
ELSE                 : 27
EQ                   : 37
FLOAT                : 14
FLOATLIT             : 58
GE                   : 44
ID                   : 3 4 7 11 25 60
IF                   : 26 27
INT                  : 12
INTLIT               : 59
LE                   : 42
NEQ                  : 38
OR                   : 32
RETURN               : 29 30
WHILE                : 28
error                : 
{                    : 3 4 24
}                    : 3 4 24

Nonterminals, with rules where they appear

AddOp                : 46
Addition             : 39 40 40 46
Assignment           : 20
Block                : 19
Conjunction          : 31 32 34
Declaration          : 9
Declarations         : 3 4 9
EquOp                : 36
Equality             : 33 34
Expression           : 25 26 27 28 29 32 61
Factor               : 49 50
Function             : 1
Functions            : 1 0
IfStatement          : 21
MulOp                : 50
Parameter            : 5 6
ParameterList        : 3 6
Primary              : 54 55
RelOp                : 40
Relation             : 35 36 36
ReturnStatement      : 23
Statement            : 16 26 27 27 28
Statements           : 3 4 16 24
Term                 : 45 46 50
Type                 : 3 4 7 11
UnaryOp              : 55
WhileStatement       : 22
empty                : 2 10 17

Parsing method: LALR

state 0

    (0) S' -> . Functions
    (1) Functions -> . Function Functions
    (2) Functions -> . empty
    (3) Function -> . Type ID ( ParameterList ) { Declarations Statements }
    (4) Function -> . Type ID ( ) { Declarations Statements }
    (8) empty -> .
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    $end            reduce using rule 8 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Functions                      shift and go to state 1
    Function                       shift and go to state 2
    empty                          shift and go to state 3
    Type                           shift and go to state 4

state 1

    (0) S' -> Functions .



state 2

    (1) Functions -> Function . Functions
    (1) Functions -> . Function Functions
    (2) Functions -> . empty
    (3) Function -> . Type ID ( ParameterList ) { Declarations Statements }
    (4) Function -> . Type ID ( ) { Declarations Statements }
    (8) empty -> .
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    $end            reduce using rule 8 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Function                       shift and go to state 2
    Functions                      shift and go to state 9
    empty                          shift and go to state 3
    Type                           shift and go to state 4

state 3

    (2) Functions -> empty .

    $end            reduce using rule 2 (Functions -> empty .)


state 4

    (3) Function -> Type . ID ( ParameterList ) { Declarations Statements }
    (4) Function -> Type . ID ( ) { Declarations Statements }

    ID              shift and go to state 10


state 5

    (12) Type -> INT .

    ID              reduce using rule 12 (Type -> INT .)


state 6

    (13) Type -> BOOL .

    ID              reduce using rule 13 (Type -> BOOL .)


state 7

    (14) Type -> FLOAT .

    ID              reduce using rule 14 (Type -> FLOAT .)


state 8

    (15) Type -> CHAR .

    ID              reduce using rule 15 (Type -> CHAR .)


state 9

    (1) Functions -> Function Functions .

    $end            reduce using rule 1 (Functions -> Function Functions .)


state 10

    (3) Function -> Type ID . ( ParameterList ) { Declarations Statements }
    (4) Function -> Type ID . ( ) { Declarations Statements }

    (               shift and go to state 11


state 11

    (3) Function -> Type ID ( . ParameterList ) { Declarations Statements }
    (4) Function -> Type ID ( . ) { Declarations Statements }
    (5) ParameterList -> . Parameter
    (6) ParameterList -> . ParameterList , Parameter
    (7) Parameter -> . Type ID
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    )               shift and go to state 14
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Type                           shift and go to state 12
    ParameterList                  shift and go to state 13
    Parameter                      shift and go to state 15

state 12

    (7) Parameter -> Type . ID

    ID              shift and go to state 16


state 13

    (3) Function -> Type ID ( ParameterList . ) { Declarations Statements }
    (6) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 17
    ,               shift and go to state 18


state 14

    (4) Function -> Type ID ( ) . { Declarations Statements }

    {               shift and go to state 19


state 15

    (5) ParameterList -> Parameter .

    )               reduce using rule 5 (ParameterList -> Parameter .)
    ,               reduce using rule 5 (ParameterList -> Parameter .)


state 16

    (7) Parameter -> Type ID .

    )               reduce using rule 7 (Parameter -> Type ID .)
    ,               reduce using rule 7 (Parameter -> Type ID .)


state 17

    (3) Function -> Type ID ( ParameterList ) . { Declarations Statements }

    {               shift and go to state 20


state 18

    (6) ParameterList -> ParameterList , . Parameter
    (7) Parameter -> . Type ID
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Parameter                      shift and go to state 21
    Type                           shift and go to state 12

state 19

    (4) Function -> Type ID ( ) { . Declarations Statements }
    (9) Declarations -> . Declaration Declarations
    (10) Declarations -> . empty
    (11) Declaration -> . Type ID ;
    (8) empty -> .
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    ;               reduce using rule 8 (empty -> .)
    {               reduce using rule 8 (empty -> .)
    ID              reduce using rule 8 (empty -> .)
    IF              reduce using rule 8 (empty -> .)
    WHILE           reduce using rule 8 (empty -> .)
    RETURN          reduce using rule 8 (empty -> .)
    }               reduce using rule 8 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Type                           shift and go to state 22
    Declarations                   shift and go to state 23
    Declaration                    shift and go to state 24
    empty                          shift and go to state 25

state 20

    (3) Function -> Type ID ( ParameterList ) { . Declarations Statements }
    (9) Declarations -> . Declaration Declarations
    (10) Declarations -> . empty
    (11) Declaration -> . Type ID ;
    (8) empty -> .
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    ;               reduce using rule 8 (empty -> .)
    {               reduce using rule 8 (empty -> .)
    ID              reduce using rule 8 (empty -> .)
    IF              reduce using rule 8 (empty -> .)
    WHILE           reduce using rule 8 (empty -> .)
    RETURN          reduce using rule 8 (empty -> .)
    }               reduce using rule 8 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Type                           shift and go to state 22
    Declarations                   shift and go to state 26
    Declaration                    shift and go to state 24
    empty                          shift and go to state 25

state 21

    (6) ParameterList -> ParameterList , Parameter .

    )               reduce using rule 6 (ParameterList -> ParameterList , Parameter .)
    ,               reduce using rule 6 (ParameterList -> ParameterList , Parameter .)


state 22

    (11) Declaration -> Type . ID ;

    ID              shift and go to state 27


state 23

    (4) Function -> Type ID ( ) { Declarations . Statements }
    (16) Statements -> . Statement Statements
    (17) Statements -> . empty
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . WhileStatement
    (23) Statement -> . ReturnStatement
    (8) empty -> .
    (24) Block -> . { Statements }
    (25) Assignment -> . ID = Expression ;
    (26) IfStatement -> . IF ( Expression ) Statement
    (27) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (28) WhileStatement -> . WHILE ( Expression ) Statement
    (29) ReturnStatement -> . RETURN Expression ;
    (30) ReturnStatement -> . RETURN ;

    ;               shift and go to state 33
    }               reduce using rule 8 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    RETURN          shift and go to state 41

    Statements                     shift and go to state 30
    Statement                      shift and go to state 31
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38

state 24

    (9) Declarations -> Declaration . Declarations
    (9) Declarations -> . Declaration Declarations
    (10) Declarations -> . empty
    (11) Declaration -> . Type ID ;
    (8) empty -> .
    (12) Type -> . INT
    (13) Type -> . BOOL
    (14) Type -> . FLOAT
    (15) Type -> . CHAR

    ;               reduce using rule 8 (empty -> .)
    {               reduce using rule 8 (empty -> .)
    ID              reduce using rule 8 (empty -> .)
    IF              reduce using rule 8 (empty -> .)
    WHILE           reduce using rule 8 (empty -> .)
    RETURN          reduce using rule 8 (empty -> .)
    }               reduce using rule 8 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Declaration                    shift and go to state 24
    Declarations                   shift and go to state 42
    empty                          shift and go to state 25
    Type                           shift and go to state 22

state 25

    (10) Declarations -> empty .

    ;               reduce using rule 10 (Declarations -> empty .)
    {               reduce using rule 10 (Declarations -> empty .)
    ID              reduce using rule 10 (Declarations -> empty .)
    IF              reduce using rule 10 (Declarations -> empty .)
    WHILE           reduce using rule 10 (Declarations -> empty .)
    RETURN          reduce using rule 10 (Declarations -> empty .)
    }               reduce using rule 10 (Declarations -> empty .)


state 26

    (3) Function -> Type ID ( ParameterList ) { Declarations . Statements }
    (16) Statements -> . Statement Statements
    (17) Statements -> . empty
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . WhileStatement
    (23) Statement -> . ReturnStatement
    (8) empty -> .
    (24) Block -> . { Statements }
    (25) Assignment -> . ID = Expression ;
    (26) IfStatement -> . IF ( Expression ) Statement
    (27) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (28) WhileStatement -> . WHILE ( Expression ) Statement
    (29) ReturnStatement -> . RETURN Expression ;
    (30) ReturnStatement -> . RETURN ;

    ;               shift and go to state 33
    }               reduce using rule 8 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    RETURN          shift and go to state 41

    Statements                     shift and go to state 43
    Statement                      shift and go to state 31
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38

state 27

    (11) Declaration -> Type ID . ;

    ;               shift and go to state 44


state 28

    (25) Assignment -> ID . = Expression ;

    =               shift and go to state 45


state 29

    (24) Block -> { . Statements }
    (16) Statements -> . Statement Statements
    (17) Statements -> . empty
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . WhileStatement
    (23) Statement -> . ReturnStatement
    (8) empty -> .
    (24) Block -> . { Statements }
    (25) Assignment -> . ID = Expression ;
    (26) IfStatement -> . IF ( Expression ) Statement
    (27) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (28) WhileStatement -> . WHILE ( Expression ) Statement
    (29) ReturnStatement -> . RETURN Expression ;
    (30) ReturnStatement -> . RETURN ;

    ;               shift and go to state 33
    }               reduce using rule 8 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    RETURN          shift and go to state 41

    Statements                     shift and go to state 46
    Statement                      shift and go to state 31
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38

state 30

    (4) Function -> Type ID ( ) { Declarations Statements . }

    }               shift and go to state 47


state 31

    (16) Statements -> Statement . Statements
    (16) Statements -> . Statement Statements
    (17) Statements -> . empty
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . WhileStatement
    (23) Statement -> . ReturnStatement
    (8) empty -> .
    (24) Block -> . { Statements }
    (25) Assignment -> . ID = Expression ;
    (26) IfStatement -> . IF ( Expression ) Statement
    (27) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (28) WhileStatement -> . WHILE ( Expression ) Statement
    (29) ReturnStatement -> . RETURN Expression ;
    (30) ReturnStatement -> . RETURN ;

    ;               shift and go to state 33
    }               reduce using rule 8 (empty -> .)
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    RETURN          shift and go to state 41

    Statement                      shift and go to state 31
    Statements                     shift and go to state 48
    empty                          shift and go to state 32
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38

state 32

    (17) Statements -> empty .

    }               reduce using rule 17 (Statements -> empty .)


state 33

    (18) Statement -> ; .

    ;               reduce using rule 18 (Statement -> ; .)
    {               reduce using rule 18 (Statement -> ; .)
    ID              reduce using rule 18 (Statement -> ; .)
    IF              reduce using rule 18 (Statement -> ; .)
    WHILE           reduce using rule 18 (Statement -> ; .)
    RETURN          reduce using rule 18 (Statement -> ; .)
    }               reduce using rule 18 (Statement -> ; .)
    ELSE            reduce using rule 18 (Statement -> ; .)


state 34

    (19) Statement -> Block .

    ;               reduce using rule 19 (Statement -> Block .)
    {               reduce using rule 19 (Statement -> Block .)
    ID              reduce using rule 19 (Statement -> Block .)
    IF              reduce using rule 19 (Statement -> Block .)
    WHILE           reduce using rule 19 (Statement -> Block .)
    RETURN          reduce using rule 19 (Statement -> Block .)
    }               reduce using rule 19 (Statement -> Block .)
    ELSE            reduce using rule 19 (Statement -> Block .)


state 35

    (20) Statement -> Assignment .

    ;               reduce using rule 20 (Statement -> Assignment .)
    {               reduce using rule 20 (Statement -> Assignment .)
    ID              reduce using rule 20 (Statement -> Assignment .)
    IF              reduce using rule 20 (Statement -> Assignment .)
    WHILE           reduce using rule 20 (Statement -> Assignment .)
    RETURN          reduce using rule 20 (Statement -> Assignment .)
    }               reduce using rule 20 (Statement -> Assignment .)
    ELSE            reduce using rule 20 (Statement -> Assignment .)


state 36

    (21) Statement -> IfStatement .

    ;               reduce using rule 21 (Statement -> IfStatement .)
    {               reduce using rule 21 (Statement -> IfStatement .)
    ID              reduce using rule 21 (Statement -> IfStatement .)
    IF              reduce using rule 21 (Statement -> IfStatement .)
    WHILE           reduce using rule 21 (Statement -> IfStatement .)
    RETURN          reduce using rule 21 (Statement -> IfStatement .)
    }               reduce using rule 21 (Statement -> IfStatement .)
    ELSE            reduce using rule 21 (Statement -> IfStatement .)


state 37

    (22) Statement -> WhileStatement .

    ;               reduce using rule 22 (Statement -> WhileStatement .)
    {               reduce using rule 22 (Statement -> WhileStatement .)
    ID              reduce using rule 22 (Statement -> WhileStatement .)
    IF              reduce using rule 22 (Statement -> WhileStatement .)
    WHILE           reduce using rule 22 (Statement -> WhileStatement .)
    RETURN          reduce using rule 22 (Statement -> WhileStatement .)
    }               reduce using rule 22 (Statement -> WhileStatement .)
    ELSE            reduce using rule 22 (Statement -> WhileStatement .)


state 38

    (23) Statement -> ReturnStatement .

    ;               reduce using rule 23 (Statement -> ReturnStatement .)
    {               reduce using rule 23 (Statement -> ReturnStatement .)
    ID              reduce using rule 23 (Statement -> ReturnStatement .)
    IF              reduce using rule 23 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 23 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 23 (Statement -> ReturnStatement .)
    }               reduce using rule 23 (Statement -> ReturnStatement .)
    ELSE            reduce using rule 23 (Statement -> ReturnStatement .)


state 39

    (26) IfStatement -> IF . ( Expression ) Statement
    (27) IfStatement -> IF . ( Expression ) Statement ELSE Statement

    (               shift and go to state 49


state 40

    (28) WhileStatement -> WHILE . ( Expression ) Statement

    (               shift and go to state 50


state 41

    (29) ReturnStatement -> RETURN . Expression ;
    (30) ReturnStatement -> RETURN . ;
    (31) Expression -> . Conjunction
    (32) Expression -> . Expression OR Conjunction
    (33) Conjunction -> . Equality
    (34) Conjunction -> . Conjunction AND Equality
    (35) Equality -> . Relation
    (36) Equality -> . Relation EquOp Relation
    (39) Relation -> . Addition
    (40) Relation -> . Addition RelOp Addition
    (45) Addition -> . Term
    (46) Addition -> . Addition AddOp Term
    (49) Term -> . Factor
    (50) Term -> . Term MulOp Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    ;               shift and go to state 52
    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Expression                     shift and go to state 51
    Conjunction                    shift and go to state 53
    Equality                       shift and go to state 54
    Relation                       shift and go to state 55
    Addition                       shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 58
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 42

    (9) Declarations -> Declaration Declarations .

    ;               reduce using rule 9 (Declarations -> Declaration Declarations .)
    {               reduce using rule 9 (Declarations -> Declaration Declarations .)
    ID              reduce using rule 9 (Declarations -> Declaration Declarations .)
    IF              reduce using rule 9 (Declarations -> Declaration Declarations .)
    WHILE           reduce using rule 9 (Declarations -> Declaration Declarations .)
    RETURN          reduce using rule 9 (Declarations -> Declaration Declarations .)
    }               reduce using rule 9 (Declarations -> Declaration Declarations .)


state 43

    (3) Function -> Type ID ( ParameterList ) { Declarations Statements . }

    }               shift and go to state 67


state 44

    (11) Declaration -> Type ID ; .

    INT             reduce using rule 11 (Declaration -> Type ID ; .)
    BOOL            reduce using rule 11 (Declaration -> Type ID ; .)
    FLOAT           reduce using rule 11 (Declaration -> Type ID ; .)
    CHAR            reduce using rule 11 (Declaration -> Type ID ; .)
    ;               reduce using rule 11 (Declaration -> Type ID ; .)
    {               reduce using rule 11 (Declaration -> Type ID ; .)
    ID              reduce using rule 11 (Declaration -> Type ID ; .)
    IF              reduce using rule 11 (Declaration -> Type ID ; .)
    WHILE           reduce using rule 11 (Declaration -> Type ID ; .)
    RETURN          reduce using rule 11 (Declaration -> Type ID ; .)
    }               reduce using rule 11 (Declaration -> Type ID ; .)


state 45

    (25) Assignment -> ID = . Expression ;
    (31) Expression -> . Conjunction
    (32) Expression -> . Expression OR Conjunction
    (33) Conjunction -> . Equality
    (34) Conjunction -> . Conjunction AND Equality
    (35) Equality -> . Relation
    (36) Equality -> . Relation EquOp Relation
    (39) Relation -> . Addition
    (40) Relation -> . Addition RelOp Addition
    (45) Addition -> . Term
    (46) Addition -> . Addition AddOp Term
    (49) Term -> . Factor
    (50) Term -> . Term MulOp Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Expression                     shift and go to state 68
    Conjunction                    shift and go to state 53
    Equality                       shift and go to state 54
    Relation                       shift and go to state 55
    Addition                       shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 58
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 46

    (24) Block -> { Statements . }

    }               shift and go to state 69


state 47

    (4) Function -> Type ID ( ) { Declarations Statements } .

    INT             reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    BOOL            reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    FLOAT           reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    CHAR            reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)
    $end            reduce using rule 4 (Function -> Type ID ( ) { Declarations Statements } .)


state 48

    (16) Statements -> Statement Statements .

    }               reduce using rule 16 (Statements -> Statement Statements .)


state 49

    (26) IfStatement -> IF ( . Expression ) Statement
    (27) IfStatement -> IF ( . Expression ) Statement ELSE Statement
    (31) Expression -> . Conjunction
    (32) Expression -> . Expression OR Conjunction
    (33) Conjunction -> . Equality
    (34) Conjunction -> . Conjunction AND Equality
    (35) Equality -> . Relation
    (36) Equality -> . Relation EquOp Relation
    (39) Relation -> . Addition
    (40) Relation -> . Addition RelOp Addition
    (45) Addition -> . Term
    (46) Addition -> . Addition AddOp Term
    (49) Term -> . Factor
    (50) Term -> . Term MulOp Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Expression                     shift and go to state 70
    Conjunction                    shift and go to state 53
    Equality                       shift and go to state 54
    Relation                       shift and go to state 55
    Addition                       shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 58
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 50

    (28) WhileStatement -> WHILE ( . Expression ) Statement
    (31) Expression -> . Conjunction
    (32) Expression -> . Expression OR Conjunction
    (33) Conjunction -> . Equality
    (34) Conjunction -> . Conjunction AND Equality
    (35) Equality -> . Relation
    (36) Equality -> . Relation EquOp Relation
    (39) Relation -> . Addition
    (40) Relation -> . Addition RelOp Addition
    (45) Addition -> . Term
    (46) Addition -> . Addition AddOp Term
    (49) Term -> . Factor
    (50) Term -> . Term MulOp Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Expression                     shift and go to state 71
    Conjunction                    shift and go to state 53
    Equality                       shift and go to state 54
    Relation                       shift and go to state 55
    Addition                       shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 58
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 51

    (29) ReturnStatement -> RETURN Expression . ;
    (32) Expression -> Expression . OR Conjunction

    ;               shift and go to state 72
    OR              shift and go to state 73


state 52

    (30) ReturnStatement -> RETURN ; .

    ;               reduce using rule 30 (ReturnStatement -> RETURN ; .)
    {               reduce using rule 30 (ReturnStatement -> RETURN ; .)
    ID              reduce using rule 30 (ReturnStatement -> RETURN ; .)
    IF              reduce using rule 30 (ReturnStatement -> RETURN ; .)
    WHILE           reduce using rule 30 (ReturnStatement -> RETURN ; .)
    RETURN          reduce using rule 30 (ReturnStatement -> RETURN ; .)
    }               reduce using rule 30 (ReturnStatement -> RETURN ; .)
    ELSE            reduce using rule 30 (ReturnStatement -> RETURN ; .)


state 53

    (31) Expression -> Conjunction .
    (34) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 31 (Expression -> Conjunction .)
    OR              reduce using rule 31 (Expression -> Conjunction .)
    )               reduce using rule 31 (Expression -> Conjunction .)
    AND             shift and go to state 74


state 54

    (33) Conjunction -> Equality .

    AND             reduce using rule 33 (Conjunction -> Equality .)
    ;               reduce using rule 33 (Conjunction -> Equality .)
    OR              reduce using rule 33 (Conjunction -> Equality .)
    )               reduce using rule 33 (Conjunction -> Equality .)


state 55

    (35) Equality -> Relation .
    (36) Equality -> Relation . EquOp Relation
    (37) EquOp -> . EQ
    (38) EquOp -> . NEQ

    AND             reduce using rule 35 (Equality -> Relation .)
    ;               reduce using rule 35 (Equality -> Relation .)
    OR              reduce using rule 35 (Equality -> Relation .)
    )               reduce using rule 35 (Equality -> Relation .)
    EQ              shift and go to state 76
    NEQ             shift and go to state 77

    EquOp                          shift and go to state 75

state 56

    (39) Relation -> Addition .
    (40) Relation -> Addition . RelOp Addition
    (46) Addition -> Addition . AddOp Term
    (41) RelOp -> . <
    (42) RelOp -> . LE
    (43) RelOp -> . >
    (44) RelOp -> . GE
    (47) AddOp -> . +
    (48) AddOp -> . -

    EQ              reduce using rule 39 (Relation -> Addition .)
    NEQ             reduce using rule 39 (Relation -> Addition .)
    AND             reduce using rule 39 (Relation -> Addition .)
    ;               reduce using rule 39 (Relation -> Addition .)
    OR              reduce using rule 39 (Relation -> Addition .)
    )               reduce using rule 39 (Relation -> Addition .)
    <               shift and go to state 80
    LE              shift and go to state 81
    >               shift and go to state 82
    GE              shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85

    RelOp                          shift and go to state 78
    AddOp                          shift and go to state 79

state 57

    (45) Addition -> Term .
    (50) Term -> Term . MulOp Factor
    (51) MulOp -> . *
    (52) MulOp -> . /
    (53) MulOp -> . %

    <               reduce using rule 45 (Addition -> Term .)
    LE              reduce using rule 45 (Addition -> Term .)
    >               reduce using rule 45 (Addition -> Term .)
    GE              reduce using rule 45 (Addition -> Term .)
    +               reduce using rule 45 (Addition -> Term .)
    -               reduce using rule 45 (Addition -> Term .)
    EQ              reduce using rule 45 (Addition -> Term .)
    NEQ             reduce using rule 45 (Addition -> Term .)
    AND             reduce using rule 45 (Addition -> Term .)
    ;               reduce using rule 45 (Addition -> Term .)
    OR              reduce using rule 45 (Addition -> Term .)
    )               reduce using rule 45 (Addition -> Term .)
    *               shift and go to state 87
    /               shift and go to state 88
    %               shift and go to state 89

    MulOp                          shift and go to state 86

state 58

    (49) Term -> Factor .

    *               reduce using rule 49 (Term -> Factor .)
    /               reduce using rule 49 (Term -> Factor .)
    %               reduce using rule 49 (Term -> Factor .)
    <               reduce using rule 49 (Term -> Factor .)
    LE              reduce using rule 49 (Term -> Factor .)
    >               reduce using rule 49 (Term -> Factor .)
    GE              reduce using rule 49 (Term -> Factor .)
    +               reduce using rule 49 (Term -> Factor .)
    -               reduce using rule 49 (Term -> Factor .)
    EQ              reduce using rule 49 (Term -> Factor .)
    NEQ             reduce using rule 49 (Term -> Factor .)
    AND             reduce using rule 49 (Term -> Factor .)
    ;               reduce using rule 49 (Term -> Factor .)
    OR              reduce using rule 49 (Term -> Factor .)
    )               reduce using rule 49 (Term -> Factor .)


state 59

    (54) Factor -> Primary .

    *               reduce using rule 54 (Factor -> Primary .)
    /               reduce using rule 54 (Factor -> Primary .)
    %               reduce using rule 54 (Factor -> Primary .)
    <               reduce using rule 54 (Factor -> Primary .)
    LE              reduce using rule 54 (Factor -> Primary .)
    >               reduce using rule 54 (Factor -> Primary .)
    GE              reduce using rule 54 (Factor -> Primary .)
    +               reduce using rule 54 (Factor -> Primary .)
    -               reduce using rule 54 (Factor -> Primary .)
    EQ              reduce using rule 54 (Factor -> Primary .)
    NEQ             reduce using rule 54 (Factor -> Primary .)
    AND             reduce using rule 54 (Factor -> Primary .)
    ;               reduce using rule 54 (Factor -> Primary .)
    OR              reduce using rule 54 (Factor -> Primary .)
    )               reduce using rule 54 (Factor -> Primary .)


state 60

    (55) Factor -> UnaryOp . Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64

    Primary                        shift and go to state 90

state 61

    (58) Primary -> FLOATLIT .

    *               reduce using rule 58 (Primary -> FLOATLIT .)
    /               reduce using rule 58 (Primary -> FLOATLIT .)
    %               reduce using rule 58 (Primary -> FLOATLIT .)
    <               reduce using rule 58 (Primary -> FLOATLIT .)
    LE              reduce using rule 58 (Primary -> FLOATLIT .)
    >               reduce using rule 58 (Primary -> FLOATLIT .)
    GE              reduce using rule 58 (Primary -> FLOATLIT .)
    +               reduce using rule 58 (Primary -> FLOATLIT .)
    -               reduce using rule 58 (Primary -> FLOATLIT .)
    EQ              reduce using rule 58 (Primary -> FLOATLIT .)
    NEQ             reduce using rule 58 (Primary -> FLOATLIT .)
    AND             reduce using rule 58 (Primary -> FLOATLIT .)
    ;               reduce using rule 58 (Primary -> FLOATLIT .)
    OR              reduce using rule 58 (Primary -> FLOATLIT .)
    )               reduce using rule 58 (Primary -> FLOATLIT .)


state 62

    (59) Primary -> INTLIT .

    *               reduce using rule 59 (Primary -> INTLIT .)
    /               reduce using rule 59 (Primary -> INTLIT .)
    %               reduce using rule 59 (Primary -> INTLIT .)
    <               reduce using rule 59 (Primary -> INTLIT .)
    LE              reduce using rule 59 (Primary -> INTLIT .)
    >               reduce using rule 59 (Primary -> INTLIT .)
    GE              reduce using rule 59 (Primary -> INTLIT .)
    +               reduce using rule 59 (Primary -> INTLIT .)
    -               reduce using rule 59 (Primary -> INTLIT .)
    EQ              reduce using rule 59 (Primary -> INTLIT .)
    NEQ             reduce using rule 59 (Primary -> INTLIT .)
    AND             reduce using rule 59 (Primary -> INTLIT .)
    ;               reduce using rule 59 (Primary -> INTLIT .)
    OR              reduce using rule 59 (Primary -> INTLIT .)
    )               reduce using rule 59 (Primary -> INTLIT .)


state 63

    (60) Primary -> ID .

    *               reduce using rule 60 (Primary -> ID .)
    /               reduce using rule 60 (Primary -> ID .)
    %               reduce using rule 60 (Primary -> ID .)
    <               reduce using rule 60 (Primary -> ID .)
    LE              reduce using rule 60 (Primary -> ID .)
    >               reduce using rule 60 (Primary -> ID .)
    GE              reduce using rule 60 (Primary -> ID .)
    +               reduce using rule 60 (Primary -> ID .)
    -               reduce using rule 60 (Primary -> ID .)
    EQ              reduce using rule 60 (Primary -> ID .)
    NEQ             reduce using rule 60 (Primary -> ID .)
    AND             reduce using rule 60 (Primary -> ID .)
    ;               reduce using rule 60 (Primary -> ID .)
    OR              reduce using rule 60 (Primary -> ID .)
    )               reduce using rule 60 (Primary -> ID .)


state 64

    (61) Primary -> ( . Expression )
    (31) Expression -> . Conjunction
    (32) Expression -> . Expression OR Conjunction
    (33) Conjunction -> . Equality
    (34) Conjunction -> . Conjunction AND Equality
    (35) Equality -> . Relation
    (36) Equality -> . Relation EquOp Relation
    (39) Relation -> . Addition
    (40) Relation -> . Addition RelOp Addition
    (45) Addition -> . Term
    (46) Addition -> . Addition AddOp Term
    (49) Term -> . Factor
    (50) Term -> . Term MulOp Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Expression                     shift and go to state 91
    Conjunction                    shift and go to state 53
    Equality                       shift and go to state 54
    Relation                       shift and go to state 55
    Addition                       shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 58
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 65

    (56) UnaryOp -> - .

    FLOATLIT        reduce using rule 56 (UnaryOp -> - .)
    INTLIT          reduce using rule 56 (UnaryOp -> - .)
    ID              reduce using rule 56 (UnaryOp -> - .)
    (               reduce using rule 56 (UnaryOp -> - .)


state 66

    (57) UnaryOp -> ! .

    FLOATLIT        reduce using rule 57 (UnaryOp -> ! .)
    INTLIT          reduce using rule 57 (UnaryOp -> ! .)
    ID              reduce using rule 57 (UnaryOp -> ! .)
    (               reduce using rule 57 (UnaryOp -> ! .)


state 67

    (3) Function -> Type ID ( ParameterList ) { Declarations Statements } .

    INT             reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    BOOL            reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    FLOAT           reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    CHAR            reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)
    $end            reduce using rule 3 (Function -> Type ID ( ParameterList ) { Declarations Statements } .)


state 68

    (25) Assignment -> ID = Expression . ;
    (32) Expression -> Expression . OR Conjunction

    ;               shift and go to state 92
    OR              shift and go to state 73


state 69

    (24) Block -> { Statements } .

    ;               reduce using rule 24 (Block -> { Statements } .)
    {               reduce using rule 24 (Block -> { Statements } .)
    ID              reduce using rule 24 (Block -> { Statements } .)
    IF              reduce using rule 24 (Block -> { Statements } .)
    WHILE           reduce using rule 24 (Block -> { Statements } .)
    RETURN          reduce using rule 24 (Block -> { Statements } .)
    }               reduce using rule 24 (Block -> { Statements } .)
    ELSE            reduce using rule 24 (Block -> { Statements } .)


state 70

    (26) IfStatement -> IF ( Expression . ) Statement
    (27) IfStatement -> IF ( Expression . ) Statement ELSE Statement
    (32) Expression -> Expression . OR Conjunction

    )               shift and go to state 93
    OR              shift and go to state 73


state 71

    (28) WhileStatement -> WHILE ( Expression . ) Statement
    (32) Expression -> Expression . OR Conjunction

    )               shift and go to state 94
    OR              shift and go to state 73


state 72

    (29) ReturnStatement -> RETURN Expression ; .

    ;               reduce using rule 29 (ReturnStatement -> RETURN Expression ; .)
    {               reduce using rule 29 (ReturnStatement -> RETURN Expression ; .)
    ID              reduce using rule 29 (ReturnStatement -> RETURN Expression ; .)
    IF              reduce using rule 29 (ReturnStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 29 (ReturnStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 29 (ReturnStatement -> RETURN Expression ; .)
    }               reduce using rule 29 (ReturnStatement -> RETURN Expression ; .)
    ELSE            reduce using rule 29 (ReturnStatement -> RETURN Expression ; .)


state 73

    (32) Expression -> Expression OR . Conjunction
    (33) Conjunction -> . Equality
    (34) Conjunction -> . Conjunction AND Equality
    (35) Equality -> . Relation
    (36) Equality -> . Relation EquOp Relation
    (39) Relation -> . Addition
    (40) Relation -> . Addition RelOp Addition
    (45) Addition -> . Term
    (46) Addition -> . Addition AddOp Term
    (49) Term -> . Factor
    (50) Term -> . Term MulOp Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Conjunction                    shift and go to state 95
    Equality                       shift and go to state 54
    Relation                       shift and go to state 55
    Addition                       shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 58
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 74

    (34) Conjunction -> Conjunction AND . Equality
    (35) Equality -> . Relation
    (36) Equality -> . Relation EquOp Relation
    (39) Relation -> . Addition
    (40) Relation -> . Addition RelOp Addition
    (45) Addition -> . Term
    (46) Addition -> . Addition AddOp Term
    (49) Term -> . Factor
    (50) Term -> . Term MulOp Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Equality                       shift and go to state 96
    Relation                       shift and go to state 55
    Addition                       shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 58
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 75

    (36) Equality -> Relation EquOp . Relation
    (39) Relation -> . Addition
    (40) Relation -> . Addition RelOp Addition
    (45) Addition -> . Term
    (46) Addition -> . Addition AddOp Term
    (49) Term -> . Factor
    (50) Term -> . Term MulOp Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Relation                       shift and go to state 97
    Addition                       shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 58
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 76

    (37) EquOp -> EQ .

    FLOATLIT        reduce using rule 37 (EquOp -> EQ .)
    INTLIT          reduce using rule 37 (EquOp -> EQ .)
    ID              reduce using rule 37 (EquOp -> EQ .)
    (               reduce using rule 37 (EquOp -> EQ .)
    -               reduce using rule 37 (EquOp -> EQ .)
    !               reduce using rule 37 (EquOp -> EQ .)


state 77

    (38) EquOp -> NEQ .

    FLOATLIT        reduce using rule 38 (EquOp -> NEQ .)
    INTLIT          reduce using rule 38 (EquOp -> NEQ .)
    ID              reduce using rule 38 (EquOp -> NEQ .)
    (               reduce using rule 38 (EquOp -> NEQ .)
    -               reduce using rule 38 (EquOp -> NEQ .)
    !               reduce using rule 38 (EquOp -> NEQ .)


state 78

    (40) Relation -> Addition RelOp . Addition
    (45) Addition -> . Term
    (46) Addition -> . Addition AddOp Term
    (49) Term -> . Factor
    (50) Term -> . Term MulOp Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Addition                       shift and go to state 98
    Term                           shift and go to state 57
    Factor                         shift and go to state 58
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 79

    (46) Addition -> Addition AddOp . Term
    (49) Term -> . Factor
    (50) Term -> . Term MulOp Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Term                           shift and go to state 99
    Factor                         shift and go to state 58
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 80

    (41) RelOp -> < .

    FLOATLIT        reduce using rule 41 (RelOp -> < .)
    INTLIT          reduce using rule 41 (RelOp -> < .)
    ID              reduce using rule 41 (RelOp -> < .)
    (               reduce using rule 41 (RelOp -> < .)
    -               reduce using rule 41 (RelOp -> < .)
    !               reduce using rule 41 (RelOp -> < .)


state 81

    (42) RelOp -> LE .

    FLOATLIT        reduce using rule 42 (RelOp -> LE .)
    INTLIT          reduce using rule 42 (RelOp -> LE .)
    ID              reduce using rule 42 (RelOp -> LE .)
    (               reduce using rule 42 (RelOp -> LE .)
    -               reduce using rule 42 (RelOp -> LE .)
    !               reduce using rule 42 (RelOp -> LE .)


state 82

    (43) RelOp -> > .

    FLOATLIT        reduce using rule 43 (RelOp -> > .)
    INTLIT          reduce using rule 43 (RelOp -> > .)
    ID              reduce using rule 43 (RelOp -> > .)
    (               reduce using rule 43 (RelOp -> > .)
    -               reduce using rule 43 (RelOp -> > .)
    !               reduce using rule 43 (RelOp -> > .)


state 83

    (44) RelOp -> GE .

    FLOATLIT        reduce using rule 44 (RelOp -> GE .)
    INTLIT          reduce using rule 44 (RelOp -> GE .)
    ID              reduce using rule 44 (RelOp -> GE .)
    (               reduce using rule 44 (RelOp -> GE .)
    -               reduce using rule 44 (RelOp -> GE .)
    !               reduce using rule 44 (RelOp -> GE .)


state 84

    (47) AddOp -> + .

    FLOATLIT        reduce using rule 47 (AddOp -> + .)
    INTLIT          reduce using rule 47 (AddOp -> + .)
    ID              reduce using rule 47 (AddOp -> + .)
    (               reduce using rule 47 (AddOp -> + .)
    -               reduce using rule 47 (AddOp -> + .)
    !               reduce using rule 47 (AddOp -> + .)


state 85

    (48) AddOp -> - .

    FLOATLIT        reduce using rule 48 (AddOp -> - .)
    INTLIT          reduce using rule 48 (AddOp -> - .)
    ID              reduce using rule 48 (AddOp -> - .)
    (               reduce using rule 48 (AddOp -> - .)
    -               reduce using rule 48 (AddOp -> - .)
    !               reduce using rule 48 (AddOp -> - .)


state 86

    (50) Term -> Term MulOp . Factor
    (54) Factor -> . Primary
    (55) Factor -> . UnaryOp Primary
    (58) Primary -> . FLOATLIT
    (59) Primary -> . INTLIT
    (60) Primary -> . ID
    (61) Primary -> . ( Expression )
    (56) UnaryOp -> . -
    (57) UnaryOp -> . !

    FLOATLIT        shift and go to state 61
    INTLIT          shift and go to state 62
    ID              shift and go to state 63
    (               shift and go to state 64
    -               shift and go to state 65
    !               shift and go to state 66

    Factor                         shift and go to state 100
    Primary                        shift and go to state 59
    UnaryOp                        shift and go to state 60

state 87

    (51) MulOp -> * .

    FLOATLIT        reduce using rule 51 (MulOp -> * .)
    INTLIT          reduce using rule 51 (MulOp -> * .)
    ID              reduce using rule 51 (MulOp -> * .)
    (               reduce using rule 51 (MulOp -> * .)
    -               reduce using rule 51 (MulOp -> * .)
    !               reduce using rule 51 (MulOp -> * .)


state 88

    (52) MulOp -> / .

    FLOATLIT        reduce using rule 52 (MulOp -> / .)
    INTLIT          reduce using rule 52 (MulOp -> / .)
    ID              reduce using rule 52 (MulOp -> / .)
    (               reduce using rule 52 (MulOp -> / .)
    -               reduce using rule 52 (MulOp -> / .)
    !               reduce using rule 52 (MulOp -> / .)


state 89

    (53) MulOp -> % .

    FLOATLIT        reduce using rule 53 (MulOp -> % .)
    INTLIT          reduce using rule 53 (MulOp -> % .)
    ID              reduce using rule 53 (MulOp -> % .)
    (               reduce using rule 53 (MulOp -> % .)
    -               reduce using rule 53 (MulOp -> % .)
    !               reduce using rule 53 (MulOp -> % .)


state 90

    (55) Factor -> UnaryOp Primary .

    *               reduce using rule 55 (Factor -> UnaryOp Primary .)
    /               reduce using rule 55 (Factor -> UnaryOp Primary .)
    %               reduce using rule 55 (Factor -> UnaryOp Primary .)
    <               reduce using rule 55 (Factor -> UnaryOp Primary .)
    LE              reduce using rule 55 (Factor -> UnaryOp Primary .)
    >               reduce using rule 55 (Factor -> UnaryOp Primary .)
    GE              reduce using rule 55 (Factor -> UnaryOp Primary .)
    +               reduce using rule 55 (Factor -> UnaryOp Primary .)
    -               reduce using rule 55 (Factor -> UnaryOp Primary .)
    EQ              reduce using rule 55 (Factor -> UnaryOp Primary .)
    NEQ             reduce using rule 55 (Factor -> UnaryOp Primary .)
    AND             reduce using rule 55 (Factor -> UnaryOp Primary .)
    ;               reduce using rule 55 (Factor -> UnaryOp Primary .)
    OR              reduce using rule 55 (Factor -> UnaryOp Primary .)
    )               reduce using rule 55 (Factor -> UnaryOp Primary .)


state 91

    (61) Primary -> ( Expression . )
    (32) Expression -> Expression . OR Conjunction

    )               shift and go to state 101
    OR              shift and go to state 73


state 92

    (25) Assignment -> ID = Expression ; .

    ;               reduce using rule 25 (Assignment -> ID = Expression ; .)
    {               reduce using rule 25 (Assignment -> ID = Expression ; .)
    ID              reduce using rule 25 (Assignment -> ID = Expression ; .)
    IF              reduce using rule 25 (Assignment -> ID = Expression ; .)
    WHILE           reduce using rule 25 (Assignment -> ID = Expression ; .)
    RETURN          reduce using rule 25 (Assignment -> ID = Expression ; .)
    }               reduce using rule 25 (Assignment -> ID = Expression ; .)
    ELSE            reduce using rule 25 (Assignment -> ID = Expression ; .)


state 93

    (26) IfStatement -> IF ( Expression ) . Statement
    (27) IfStatement -> IF ( Expression ) . Statement ELSE Statement
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . WhileStatement
    (23) Statement -> . ReturnStatement
    (24) Block -> . { Statements }
    (25) Assignment -> . ID = Expression ;
    (26) IfStatement -> . IF ( Expression ) Statement
    (27) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (28) WhileStatement -> . WHILE ( Expression ) Statement
    (29) ReturnStatement -> . RETURN Expression ;
    (30) ReturnStatement -> . RETURN ;

    ;               shift and go to state 33
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    RETURN          shift and go to state 41

    Statement                      shift and go to state 102
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38

state 94

    (28) WhileStatement -> WHILE ( Expression ) . Statement
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . WhileStatement
    (23) Statement -> . ReturnStatement
    (24) Block -> . { Statements }
    (25) Assignment -> . ID = Expression ;
    (26) IfStatement -> . IF ( Expression ) Statement
    (27) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (28) WhileStatement -> . WHILE ( Expression ) Statement
    (29) ReturnStatement -> . RETURN Expression ;
    (30) ReturnStatement -> . RETURN ;

    ;               shift and go to state 33
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    RETURN          shift and go to state 41

    Statement                      shift and go to state 103
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38

state 95

    (32) Expression -> Expression OR Conjunction .
    (34) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 32 (Expression -> Expression OR Conjunction .)
    OR              reduce using rule 32 (Expression -> Expression OR Conjunction .)
    )               reduce using rule 32 (Expression -> Expression OR Conjunction .)
    AND             shift and go to state 74


state 96

    (34) Conjunction -> Conjunction AND Equality .

    AND             reduce using rule 34 (Conjunction -> Conjunction AND Equality .)
    ;               reduce using rule 34 (Conjunction -> Conjunction AND Equality .)
    OR              reduce using rule 34 (Conjunction -> Conjunction AND Equality .)
    )               reduce using rule 34 (Conjunction -> Conjunction AND Equality .)


state 97

    (36) Equality -> Relation EquOp Relation .

    AND             reduce using rule 36 (Equality -> Relation EquOp Relation .)
    ;               reduce using rule 36 (Equality -> Relation EquOp Relation .)
    OR              reduce using rule 36 (Equality -> Relation EquOp Relation .)
    )               reduce using rule 36 (Equality -> Relation EquOp Relation .)


state 98

    (40) Relation -> Addition RelOp Addition .
    (46) Addition -> Addition . AddOp Term
    (47) AddOp -> . +
    (48) AddOp -> . -

    EQ              reduce using rule 40 (Relation -> Addition RelOp Addition .)
    NEQ             reduce using rule 40 (Relation -> Addition RelOp Addition .)
    AND             reduce using rule 40 (Relation -> Addition RelOp Addition .)
    ;               reduce using rule 40 (Relation -> Addition RelOp Addition .)
    OR              reduce using rule 40 (Relation -> Addition RelOp Addition .)
    )               reduce using rule 40 (Relation -> Addition RelOp Addition .)
    +               shift and go to state 84
    -               shift and go to state 85

    AddOp                          shift and go to state 79

state 99

    (46) Addition -> Addition AddOp Term .
    (50) Term -> Term . MulOp Factor
    (51) MulOp -> . *
    (52) MulOp -> . /
    (53) MulOp -> . %

    <               reduce using rule 46 (Addition -> Addition AddOp Term .)
    LE              reduce using rule 46 (Addition -> Addition AddOp Term .)
    >               reduce using rule 46 (Addition -> Addition AddOp Term .)
    GE              reduce using rule 46 (Addition -> Addition AddOp Term .)
    +               reduce using rule 46 (Addition -> Addition AddOp Term .)
    -               reduce using rule 46 (Addition -> Addition AddOp Term .)
    EQ              reduce using rule 46 (Addition -> Addition AddOp Term .)
    NEQ             reduce using rule 46 (Addition -> Addition AddOp Term .)
    AND             reduce using rule 46 (Addition -> Addition AddOp Term .)
    ;               reduce using rule 46 (Addition -> Addition AddOp Term .)
    OR              reduce using rule 46 (Addition -> Addition AddOp Term .)
    )               reduce using rule 46 (Addition -> Addition AddOp Term .)
    *               shift and go to state 87
    /               shift and go to state 88
    %               shift and go to state 89

    MulOp                          shift and go to state 86

state 100

    (50) Term -> Term MulOp Factor .

    *               reduce using rule 50 (Term -> Term MulOp Factor .)
    /               reduce using rule 50 (Term -> Term MulOp Factor .)
    %               reduce using rule 50 (Term -> Term MulOp Factor .)
    <               reduce using rule 50 (Term -> Term MulOp Factor .)
    LE              reduce using rule 50 (Term -> Term MulOp Factor .)
    >               reduce using rule 50 (Term -> Term MulOp Factor .)
    GE              reduce using rule 50 (Term -> Term MulOp Factor .)
    +               reduce using rule 50 (Term -> Term MulOp Factor .)
    -               reduce using rule 50 (Term -> Term MulOp Factor .)
    EQ              reduce using rule 50 (Term -> Term MulOp Factor .)
    NEQ             reduce using rule 50 (Term -> Term MulOp Factor .)
    AND             reduce using rule 50 (Term -> Term MulOp Factor .)
    ;               reduce using rule 50 (Term -> Term MulOp Factor .)
    OR              reduce using rule 50 (Term -> Term MulOp Factor .)
    )               reduce using rule 50 (Term -> Term MulOp Factor .)


state 101

    (61) Primary -> ( Expression ) .

    *               reduce using rule 61 (Primary -> ( Expression ) .)
    /               reduce using rule 61 (Primary -> ( Expression ) .)
    %               reduce using rule 61 (Primary -> ( Expression ) .)
    <               reduce using rule 61 (Primary -> ( Expression ) .)
    LE              reduce using rule 61 (Primary -> ( Expression ) .)
    >               reduce using rule 61 (Primary -> ( Expression ) .)
    GE              reduce using rule 61 (Primary -> ( Expression ) .)
    +               reduce using rule 61 (Primary -> ( Expression ) .)
    -               reduce using rule 61 (Primary -> ( Expression ) .)
    EQ              reduce using rule 61 (Primary -> ( Expression ) .)
    NEQ             reduce using rule 61 (Primary -> ( Expression ) .)
    AND             reduce using rule 61 (Primary -> ( Expression ) .)
    ;               reduce using rule 61 (Primary -> ( Expression ) .)
    OR              reduce using rule 61 (Primary -> ( Expression ) .)
    )               reduce using rule 61 (Primary -> ( Expression ) .)


state 102

    (26) IfStatement -> IF ( Expression ) Statement .
    (27) IfStatement -> IF ( Expression ) Statement . ELSE Statement

  ! shift/reduce conflict for ELSE resolved as shift
    ;               reduce using rule 26 (IfStatement -> IF ( Expression ) Statement .)
    {               reduce using rule 26 (IfStatement -> IF ( Expression ) Statement .)
    ID              reduce using rule 26 (IfStatement -> IF ( Expression ) Statement .)
    IF              reduce using rule 26 (IfStatement -> IF ( Expression ) Statement .)
    WHILE           reduce using rule 26 (IfStatement -> IF ( Expression ) Statement .)
    RETURN          reduce using rule 26 (IfStatement -> IF ( Expression ) Statement .)
    }               reduce using rule 26 (IfStatement -> IF ( Expression ) Statement .)
    ELSE            shift and go to state 104

  ! ELSE            [ reduce using rule 26 (IfStatement -> IF ( Expression ) Statement .) ]


state 103

    (28) WhileStatement -> WHILE ( Expression ) Statement .

    ;               reduce using rule 28 (WhileStatement -> WHILE ( Expression ) Statement .)
    {               reduce using rule 28 (WhileStatement -> WHILE ( Expression ) Statement .)
    ID              reduce using rule 28 (WhileStatement -> WHILE ( Expression ) Statement .)
    IF              reduce using rule 28 (WhileStatement -> WHILE ( Expression ) Statement .)
    WHILE           reduce using rule 28 (WhileStatement -> WHILE ( Expression ) Statement .)
    RETURN          reduce using rule 28 (WhileStatement -> WHILE ( Expression ) Statement .)
    }               reduce using rule 28 (WhileStatement -> WHILE ( Expression ) Statement .)
    ELSE            reduce using rule 28 (WhileStatement -> WHILE ( Expression ) Statement .)


state 104

    (27) IfStatement -> IF ( Expression ) Statement ELSE . Statement
    (18) Statement -> . ;
    (19) Statement -> . Block
    (20) Statement -> . Assignment
    (21) Statement -> . IfStatement
    (22) Statement -> . WhileStatement
    (23) Statement -> . ReturnStatement
    (24) Block -> . { Statements }
    (25) Assignment -> . ID = Expression ;
    (26) IfStatement -> . IF ( Expression ) Statement
    (27) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (28) WhileStatement -> . WHILE ( Expression ) Statement
    (29) ReturnStatement -> . RETURN Expression ;
    (30) ReturnStatement -> . RETURN ;

    ;               shift and go to state 33
    {               shift and go to state 29
    ID              shift and go to state 28
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    RETURN          shift and go to state 41

    Statement                      shift and go to state 105
    Block                          shift and go to state 34
    Assignment                     shift and go to state 35
    IfStatement                    shift and go to state 36
    WhileStatement                 shift and go to state 37
    ReturnStatement                shift and go to state 38

state 105

    (27) IfStatement -> IF ( Expression ) Statement ELSE Statement .

    ;               reduce using rule 27 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    {               reduce using rule 27 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ID              reduce using rule 27 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    IF              reduce using rule 27 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    WHILE           reduce using rule 27 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    RETURN          reduce using rule 27 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    }               reduce using rule 27 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ELSE            reduce using rule 27 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 102 resolved as shift
